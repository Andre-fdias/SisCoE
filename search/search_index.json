{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo \u00e0 Documenta\u00e7\u00e3o T\u00e9cnica do SisCoE","text":""},{"location":"#visao-geral","title":"Vis\u00e3o Geral","text":"<p>O SisCoE (Sistema de Controle de Efetivo) \u00e9 uma aplica\u00e7\u00e3o web robusta e modular, projetada para o controle funcional e a gest\u00e3o de recursos humanos de militares. Desenvolvido com o framework Django e estilizado com TailwindCSS, o sistema oferece uma solu\u00e7\u00e3o completa para a administra\u00e7\u00e3o de efetivo, escalas, f\u00e9rias, e outras atividades pertinentes \u00e0 gest\u00e3o de pessoal.</p> <p>Esta documenta\u00e7\u00e3o t\u00e9cnica serve como um guia centralizado para desenvolvedores, arquitetos de software e equipes de DevOps. O objetivo \u00e9 fornecer um entendimento profundo da arquitetura do sistema, das conven\u00e7\u00f5es de c\u00f3digo, dos processos de desenvolvimento e das pr\u00e1ticas de deploy.</p>"},{"location":"#estrutura-da-documentacao","title":"Estrutura da Documenta\u00e7\u00e3o","text":"<p>A documenta\u00e7\u00e3o est\u00e1 organizada nas seguintes se\u00e7\u00f5es principais:</p> <ul> <li>Arquitetura: Descreve a vis\u00e3o geral da arquitetura, os componentes do sistema, os fluxos de dados e as integra\u00e7\u00f5es.</li> <li>Desenvolvimento: Fornece guias para configurar o ambiente de desenvolvimento, detalhes sobre o backend e o frontend, estrutura do banco de dados e informa\u00e7\u00f5es sobre testes.</li> <li>Deploy e Monitoramento: Detalha o processo de deploy com Docker e CI/CD, al\u00e9m de pr\u00e1ticas de monitoramento e logging.</li> <li>Seguran\u00e7a: Cobre as boas pr\u00e1ticas de seguran\u00e7a, controle de acesso e criptografia implementadas no sistema.</li> <li>Vers\u00e3o e Commits: Apresenta os padr\u00f5es de versionamento e de commits adotados no projeto.</li> <li>Anexos: Inclui um gloss\u00e1rio de termos, o roadmap do projeto e outras refer\u00eancias \u00fateis.</li> </ul> <p>Utilize o menu de navega\u00e7\u00e3o \u00e0 esquerda para explorar os t\u00f3picos de interesse.</p>"},{"location":"anexos/glossario/","title":"Gloss\u00e1rio","text":"<p>Este gloss\u00e1rio define termos, siglas e conceitos importantes utilizados no contexto do projeto SisCoE e em sua documenta\u00e7\u00e3o.</p>"},{"location":"anexos/glossario/#b","title":"B","text":"<p>Brevo : Plataforma de marketing e transacional (anteriormente Sendinblue) usada pelo SisCoE para o envio de e-mails.</p>"},{"location":"anexos/glossario/#c","title":"C","text":"<p>CI/CD (Continuous Integration/Continuous Deployment) : Pr\u00e1tica de automa\u00e7\u00e3o dos processos de integra\u00e7\u00e3o de c\u00f3digo, teste e deploy da aplica\u00e7\u00e3o.</p> <p>Conventional Commits : Uma especifica\u00e7\u00e3o para adicionar significado leg\u00edvel por m\u00e1quina \u00e0s mensagens de commit, permitindo a automa\u00e7\u00e3o de tarefas como a gera\u00e7\u00e3o de changelogs.</p>"},{"location":"anexos/glossario/#d","title":"D","text":"<p>Django : Framework web de alto n\u00edvel, escrito em Python, utilizado como base para o desenvolvimento do SisCoE.</p> <p>Docker : Plataforma de containeriza\u00e7\u00e3o usada para empacotar a aplica\u00e7\u00e3o e suas depend\u00eancias em cont\u00eaineres, garantindo consist\u00eancia entre os ambientes.</p> <p>Docker Compose : Ferramenta para definir and executar aplica\u00e7\u00f5es Docker multi-cont\u00eainer.</p>"},{"location":"anexos/glossario/#m","title":"M","text":"<p>MVT (Model-View-Template) : Padr\u00e3o de arquitetura de software utilizado pelo Django. O Model gerencia os dados, a View processa a l\u00f3gica de neg\u00f3cio e o Template lida com a apresenta\u00e7\u00e3o.</p>"},{"location":"anexos/glossario/#o","title":"O","text":"<p>ORM (Object-Relational Mapper) : T\u00e9cnica de programa\u00e7\u00e3o que converte dados entre sistemas de tipos incompat\u00edveis. No Django, o ORM permite que os desenvolvedores interajam com o banco de dados usando c\u00f3digo Python em vez de SQL.</p>"},{"location":"anexos/glossario/#p","title":"P","text":"<p>PostgreSQL : Sistema de gerenciamento de banco de dados relacional objeto-relacional de c\u00f3digo aberto utilizado pelo SisCoE em produ\u00e7\u00e3o.</p>"},{"location":"anexos/glossario/#r","title":"R","text":"<p>RE (Registro de Efetivo) : N\u00famero de identifica\u00e7\u00e3o \u00fanico para cada militar no sistema.</p>"},{"location":"anexos/glossario/#s","title":"S","text":"<p>SemVer (Semantic Versioning) : Especifica\u00e7\u00e3o de versionamento que atribui significado aos n\u00fameros de vers\u00e3o, no formato <code>MAJOR.MINOR.PATCH</code>.</p> <p>SGB (Subgrupamento de Bombeiros) : Uma subdivis\u00e3o organizacional dentro da estrutura do Corpo de Bombeiros.</p> <p>SisCoE : Sigla para Sistema de Controle de Efetivo, o nome do projeto.</p>"},{"location":"anexos/referencias/","title":"Refer\u00eancias","text":"<p>Esta se\u00e7\u00e3o cont\u00e9m uma lista de links para a documenta\u00e7\u00e3o oficial das principais tecnologias e especifica\u00e7\u00f5es utilizadas no projeto SisCoE.</p>"},{"location":"anexos/referencias/#frameworks-e-linguagens","title":"Frameworks e Linguagens","text":"<ul> <li>Documenta\u00e7\u00e3o do Python: Documenta\u00e7\u00e3o oficial da linguagem Python.</li> <li>Documenta\u00e7\u00e3o do Django: Documenta\u00e7\u00e3o oficial do framework Django.</li> <li>Documenta\u00e7\u00e3o do TailwindCSS: Documenta\u00e7\u00e3o oficial do framework CSS.</li> </ul>"},{"location":"anexos/referencias/#banco-de-dados","title":"Banco de Dados","text":"<ul> <li>Documenta\u00e7\u00e3o do PostgreSQL: Documenta\u00e7\u00e3o oficial do PostgreSQL.</li> </ul>"},{"location":"anexos/referencias/#infraestrutura-e-deploy","title":"Infraestrutura e Deploy","text":"<ul> <li>Documenta\u00e7\u00e3o do Docker: Documenta\u00e7\u00e3o oficial do Docker.</li> <li>Documenta\u00e7\u00e3o do Docker Compose: Documenta\u00e7\u00e3o oficial do Docker Compose.</li> <li>Documenta\u00e7\u00e3o do Nginx: Documenta\u00e7\u00e3o oficial do Nginx.</li> <li>Documenta\u00e7\u00e3o do Gunicorn: Documenta\u00e7\u00e3o oficial do Gunicorn.</li> </ul>"},{"location":"anexos/referencias/#padroes-e-especificacoes","title":"Padr\u00f5es e Especifica\u00e7\u00f5es","text":"<ul> <li>Conventional Commits: A especifica\u00e7\u00e3o do padr\u00e3o de commits adotado.</li> <li>Semantic Versioning (SemVer): A especifica\u00e7\u00e3o do versionamento sem\u00e2ntico.</li> </ul>"},{"location":"anexos/referencias/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<ul> <li>MkDocs: Site oficial do gerador de documenta\u00e7\u00e3o est\u00e1tica.</li> <li>Material for MkDocs: Documenta\u00e7\u00e3o do tema Material utilizado neste site.</li> <li>Mermaid: Documenta\u00e7\u00e3o da sintaxe para a cria\u00e7\u00e3o de diagramas.</li> </ul>"},{"location":"anexos/roadmap/","title":"Roadmap de Evolu\u00e7\u00e3o do Projeto","text":"<p>Este documento descreve uma vis\u00e3o de alto n\u00edvel para a evolu\u00e7\u00e3o futura do sistema SisCoE, com foco em melhorias de arquitetura, automa\u00e7\u00e3o e funcionalidades.</p>"},{"location":"anexos/roadmap/#curto-prazo-proximos-3-6-meses","title":"Curto Prazo (Pr\u00f3ximos 3-6 meses)","text":"<ul> <li> <p>[CI/CD] Implementa\u00e7\u00e3o do Pipeline de CI:</p> <ul> <li>Objetivo: Automatizar a execu\u00e7\u00e3o de testes e a an\u00e1lise de c\u00f3digo a cada commit.</li> <li>A\u00e7\u00f5es: Configurar o GitHub Actions para rodar os testes do Django e um linter (como <code>Ruff</code>) em cada Pull Request.</li> </ul> </li> <li> <p>[Monitoramento] Implementa\u00e7\u00e3o de Rastreamento de Erros:</p> <ul> <li>Objetivo: Capturar e analisar erros de produ\u00e7\u00e3o em tempo real.</li> <li>A\u00e7\u00f5es: Integrar o Sentry ou GlitchTip \u00e0 aplica\u00e7\u00e3o Django para monitoramento de exce\u00e7\u00f5es.</li> </ul> </li> <li> <p>[Testes] Aumento da Cobertura de Testes:</p> <ul> <li>Objetivo: Aumentar a confian\u00e7a nas altera\u00e7\u00f5es de c\u00f3digo.</li> <li>A\u00e7\u00f5es: Focar em escrever testes unit\u00e1rios e de integra\u00e7\u00e3o para os apps mais cr\u00edticos, como <code>efetivo</code> e <code>accounts</code>, visando uma cobertura de testes acima de 80%.</li> </ul> </li> </ul>"},{"location":"anexos/roadmap/#medio-prazo-6-12-meses","title":"M\u00e9dio Prazo (6-12 meses)","text":"<ul> <li> <p>[Arquitetura] Desacoplamento do Frontend (SPA):</p> <ul> <li>Objetivo: Modernizar a arquitetura, desacoplar o frontend do backend e melhorar a experi\u00eancia do usu\u00e1rio.</li> <li>A\u00e7\u00f5es:<ol> <li>Formalizar a API interna em uma API REST completa usando o Django REST Framework.</li> <li>Iniciar o desenvolvimento de um novo frontend como uma Single Page Application (SPA), utilizando um framework moderno como React, Vue.js ou Svelte.</li> </ol> </li> </ul> </li> <li> <p>[Deploy] Implementa\u00e7\u00e3o do Pipeline de CD:</p> <ul> <li>Objetivo: Automatizar o deploy da aplica\u00e7\u00e3o em produ\u00e7\u00e3o.</li> <li>A\u00e7\u00f5es: Configurar o GitHub Actions para fazer o deploy autom\u00e1tico da aplica\u00e7\u00e3o no servidor de produ\u00e7\u00e3o ap\u00f3s um merge bem-sucedido na branch <code>main</code>.</li> </ul> </li> <li> <p>[Monitoramento] Implementa\u00e7\u00e3o de M\u00e9tricas e Dashboards:</p> <ul> <li>Objetivo: Obter visibilidade sobre a performance e a sa\u00fade da aplica\u00e7\u00e3o.</li> <li>A\u00e7\u00f5es: Integrar o <code>django-prometheus</code> para expor m\u00e9tricas da aplica\u00e7\u00e3o e configurar dashboards no Grafana para visualizar tempo de resposta, taxa de erros, etc.</li> </ul> </li> </ul>"},{"location":"anexos/roadmap/#longo-prazo-12-meses","title":"Longo Prazo (12+ meses)","text":"<ul> <li> <p>[API] Evolu\u00e7\u00e3o para uma API P\u00fablica:</p> <ul> <li>Objetivo: Permitir a integra\u00e7\u00e3o do SisCoE com outros sistemas.</li> <li>A\u00e7\u00f5es: Documentar e publicar a API REST, implementando autentica\u00e7\u00e3o baseada em tokens (como OAuth2) para clientes externos.</li> </ul> </li> <li> <p>[Arquitetura] Refatora\u00e7\u00e3o para Microsservi\u00e7os (se necess\u00e1rio):</p> <ul> <li>Objetivo: Melhorar a escalabilidade e a manutenibilidade de m\u00f3dulos complexos.</li> <li>A\u00e7\u00f5es: Avaliar se algum dos apps Django (como <code>efetivo</code> ou <code>relatorios</code>) se beneficiaria de ser extra\u00eddo do mon\u00f3lito para um microsservi\u00e7o independente, com seu pr\u00f3prio banco de dados e ciclo de deploy.</li> </ul> </li> <li> <p>[Seguran\u00e7a] Auditoria de Seguran\u00e7a Completa:</p> <ul> <li>Objetivo: Garantir o mais alto n\u00edvel de seguran\u00e7a para os dados.</li> <li>A\u00e7\u00f5es: Contratar uma auditoria de seguran\u00e7a externa ou realizar uma revis\u00e3o de seguran\u00e7a interna aprofundada, incluindo testes de penetra\u00e7\u00e3o (pentest).</li> </ul> </li> </ul> <p>Este roadmap \u00e9 um guia flex\u00edvel e deve ser revisado e adaptado periodicamente com base nas necessidades do projeto e no feedback dos usu\u00e1rios.</p>"},{"location":"arquitetura/componentes/","title":"Componentes do Sistema","text":"<p>A arquitetura do SisCoE \u00e9 baseada em uma cole\u00e7\u00e3o de \"apps\" Django, onde cada app encapsula uma funcionalidade de neg\u00f3cio espec\u00edfica. Esta abordagem modular promove a separa\u00e7\u00e3o de responsabilidades e facilita a manuten\u00e7\u00e3o.</p> <p>Abaixo est\u00e3o descritos os principais componentes (apps) do sistema.</p>"},{"location":"arquitetura/componentes/#app-accounts","title":"App <code>accounts</code>","text":"<p>O app <code>accounts</code> \u00e9 o cora\u00e7\u00e3o do gerenciamento de usu\u00e1rios, autentica\u00e7\u00e3o e controle de acesso.</p> <p>Responsabilidades: - Gerenciamento de contas de usu\u00e1rio, incluindo login, logout e recupera\u00e7\u00e3o de senha. - Controle de permiss\u00f5es hier\u00e1rquicas (B\u00e1sico, Visitante, SGB, Gestor, Admin). - Registro de hist\u00f3rico de login e a\u00e7\u00f5es do usu\u00e1rio. - Associa\u00e7\u00e3o de uma conta de usu\u00e1rio a um registro no <code>efetivo</code>.</p> <p>Exemplo de Modelo (<code>User</code>): <pre><code>class User(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(_('email address'), max_length=100, unique=True)\n    first_name = models.CharField(_('first name'), max_length=150)\n    last_name = models.CharField(_('last name'), max_length=150)\n\n    is_active = models.BooleanField(_('active'), default=True)\n    is_admin = models.BooleanField(_('admin status'), default=False)\n\n    PERMISSOES_CHOICES = (\n        (\"basico\", \"B\u00e1sico\"),\n        (\"visitantes\", \"Visitante\"),\n        (\"sgb\", \"SGB\"),\n        (\"gestor\", \"Gestor\"),\n        (\"admin\", \"Admin\"),\n    )\n    permissoes = models.CharField(_('Permission Level'), max_length=20, \n                                  choices=PERMISSOES_CHOICES, default=\"basico\")\n\n    cadastro = models.OneToOneField(\n        'efetivo.Cadastro',\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        related_name='user_account',\n        verbose_name=_(\"Military Record\")\n    )\n    # ...\n</code></pre></p>"},{"location":"arquitetura/componentes/#app-efetivo","title":"App <code>efetivo</code>","text":"<p>Este \u00e9 o app mais cr\u00edtico do sistema, respons\u00e1vel por toda a gest\u00e3o dos dados cadastrais e funcionais dos militares.</p> <p>Responsabilidades: - Manter o cadastro b\u00e1sico dos militares (RE, nome, CPF, etc.). - Registrar o hist\u00f3rico de promo\u00e7\u00f5es. - Controlar a situa\u00e7\u00e3o funcional (ativo, inativo, licen\u00e7a, etc.). - Gerenciar o hist\u00f3rico de movimenta\u00e7\u00f5es e aloca\u00e7\u00f5es (SGB, se\u00e7\u00e3o, etc.). - Armazenar imagens e fotos de perfil.</p> <p>Exemplo de Modelo (<code>Cadastro</code>): <pre><code>class Cadastro(models.Model):\n    id = models.AutoField(primary_key=True)\n    re = models.CharField(max_length=6,  blank=False, null=False, unique=True)\n    dig = models.CharField(max_length=1, blank=False, null=False)\n    nome = models.CharField(max_length=50, blank=False, null=False)\n    nome_de_guerra = models.CharField(max_length=20, blank=False, null=False)\n    genero = models.CharField(max_length=10, blank=False, null=False, choices=genero_choices)\n    nasc = models.DateField(blank=False, null=False)\n    cpf = models.CharField(max_length=14, blank=False, null=False, unique=True)\n    email = models.EmailField(max_length=100, unique=True, blank=False, null=False)\n    # ...\n</code></pre></p>"},{"location":"arquitetura/componentes/#app-cursos","title":"App <code>cursos</code>","text":"<p>Gerencia os cursos e medalhas associados a cada militar.</p> <p>Responsabilidades: - Registrar os cursos realizados pelos militares. - Manter um cat\u00e1logo de medalhas e honrarias. - Associar medalhas concedidas a cada militar.</p> <p>Exemplo de Modelo (<code>Curso</code>): <pre><code>class Curso(models.Model):\n    CURSOS_CHOICES = (\n        ('Atendimento Pr\u00e9-Hospitalar T\u00e1tico', 'Atendimento Pr\u00e9-Hospitalar T\u00e1tico'),\n        ('Gest\u00e3o pela Qualidade_Oficial', 'Gest\u00e3o Contempor\u00e2nea pela Qualidade'),\n        # ...\n    )\n\n    cadastro = models.ForeignKey(Cadastro, on_delete=models.CASCADE, related_name='cursos')\n    curso = models.CharField(max_length=255, choices=CURSOS_CHOICES)\n    data_publicacao = models.DateField(verbose_name=\"Data de Publica\u00e7\u00e3o\")\n    bol_publicacao = models.CharField(max_length=255, verbose_name=\"BOL Publica\u00e7\u00e3o\")\n    # ...\n</code></pre></p>"},{"location":"arquitetura/componentes/#app-agenda","title":"App <code>agenda</code>","text":"<p>Fornece funcionalidades de agenda, como lembretes e tarefas, para os usu\u00e1rios.</p> <p>Responsabilidades: - Permitir que usu\u00e1rios criem lembretes pessoais. - Permitir o agendamento de tarefas com data de in\u00edcio e fim.</p> <p>Exemplo de Modelo (<code>Lembrete</code>): <pre><code>class Lembrete(models.Model):\n    titulo = models.CharField(max_length=200)\n    descricao = models.TextField()\n    data = models.DateTimeField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    # ...\n</code></pre></p>"},{"location":"arquitetura/componentes/#app-core","title":"App <code>core</code>","text":"<p>O app <code>core</code> cont\u00e9m a l\u00f3gica de neg\u00f3cio central, p\u00e1ginas principais e funcionalidades que n\u00e3o se encaixam em outros apps mais espec\u00edficos.</p> <p>Responsabilidades: - Fornecer a p\u00e1gina inicial (dashboard). - Implementar a funcionalidade de busca global no sistema. - Gerenciar middlewares customizados.</p> <p>Obs: O <code>models.py</code> do app <code>core</code> parece conter c\u00f3digo legado ou refatorado e n\u00e3o possui modelos de dados centrais atualmente.</p>"},{"location":"arquitetura/componentes/#app-crm","title":"App <code>crm</code>","text":"<p>Este app parece ser um placeholder ou um m\u00f3dulo em desenvolvimento, pois n\u00e3o cont\u00e9m modelos de dados. Sua finalidade, pelo nome, seria a de \"Customer Relationship Management\", que no contexto do sistema, poderia ser adaptado para a gest\u00e3o de relacionamento e comunica\u00e7\u00e3o com o efetivo.</p>"},{"location":"arquitetura/diagramas_fluxo/","title":"Diagramas de Fluxo e Arquitetura","text":"<p>Esta se\u00e7\u00e3o apresenta diagramas que ilustram os principais fluxos de trabalho e a arquitetura de componentes do sistema SisCoE.</p>"},{"location":"arquitetura/diagramas_fluxo/#diagrama-de-conteineres-nivel-2-c4-model","title":"Diagrama de Cont\u00eaineres (N\u00edvel 2 - C4 Model)","text":"<p>Este diagrama mostra os cont\u00eaineres que comp\u00f5em o sistema SisCoE quando executado via Docker Compose.</p> <pre><code>graph TD\n    subgraph \"Ambiente Docker\"\n        direction LR\n        nginx[Nginx] --&gt; app[Aplica\u00e7\u00e3o Django]\n        app --&gt; db[(PostgreSQL)]\n        app --&gt; mailhog[Mailhog]\n    end\n\n    user[Usu\u00e1rio] -- HTTPS --&gt; nginx\n\n    style app fill:#1E88E5,stroke:#000,stroke-width:2px,color:#fff\n    style db fill:#F57C00,stroke:#000,stroke-width:2px,color:#fff\n    style nginx fill:#388E3C,stroke:#000,stroke-width:2px,color:#fff\n    style mailhog fill:#7B1FA2,stroke:#000,stroke-width:2px,color:#fff\n</code></pre>"},{"location":"arquitetura/diagramas_fluxo/#fluxo-de-autenticacao-de-usuario","title":"Fluxo de Autentica\u00e7\u00e3o de Usu\u00e1rio","text":"<p>O diagrama abaixo detalha o processo de login de um usu\u00e1rio no sistema.</p> <pre><code>flowchart TD\n    A[Usu\u00e1rio acessa a p\u00e1gina de login] --&gt; B{Formul\u00e1rio de Login};\n    B -- Preenche credenciais --&gt; C[Envia POST para /accounts/login/];\n    C --&gt; D{View `LoginView`};\n    D -- Utiliza `django.contrib.auth` --&gt; E{Valida usu\u00e1rio e senha};\n    E -- Sucesso --&gt; F[Cria sess\u00e3o e redireciona para o Dashboard];\n    E -- Falha --&gt; G[Exibe mensagem de erro no formul\u00e1rio];\n</code></pre>"},{"location":"arquitetura/diagramas_fluxo/#diagrama-entidade-relacionamento-er-core","title":"Diagrama Entidade-Relacionamento (ER) - Core","text":"<p>Este \u00e9 um diagrama ER simplificado, focado nos modelos principais de usu\u00e1rios e grupos.</p> <pre><code>erDiagram\n    USERS ||--o{ AUTH_USER_GROUPS : \"tem\"\n    GROUPS ||--o{ AUTH_USER_GROUPS : \"cont\u00e9m\"\n\n    USERS {\n        int id PK\n        varchar username\n        varchar first_name\n        varchar last_name\n        varchar email\n        bool is_staff\n        bool is_active\n        datetime date_joined\n    }\n\n    GROUPS {\n        int id PK\n        varchar name\n    }\n\n    AUTH_USER_GROUPS {\n        int user_id FK\n        int group_id FK\n    }\n</code></pre>"},{"location":"arquitetura/diagramas_fluxo/#pipeline-de-integracao-e-deploy-continuo-cicd","title":"Pipeline de Integra\u00e7\u00e3o e Deploy Cont\u00ednuo (CI/CD)","text":"<p>O diagrama a seguir representa o fluxo de CI/CD idealizado para o projeto (atualmente n\u00e3o implementado).</p> <pre><code>flowchart LR\n    A[Developer faz commit] -- Push --&gt; B(GitHub Repository)\n    B -- Trigger --&gt; C{GitHub Actions}\n    subgraph \"CI Pipeline\"\n        direction TB\n        C --&gt; D[1. Build da Imagem Docker]\n        D --&gt; E[2. Execu\u00e7\u00e3o dos Testes]\n        E -- Sucesso --&gt; F[3. Push da Imagem para o Docker Hub]\n    end\n    F -- Trigger --&gt; G{Deploy no Servidor}\n    subgraph \"CD Pipeline\"\n        direction TB\n        G --&gt; H[1. Pull da nova imagem]\n        H --&gt; I[2. Executa as migra\u00e7\u00f5es do banco]\n        I --&gt; J[3. Reinicia os cont\u00eaineres da aplica\u00e7\u00e3o]\n    end\n</code></pre>"},{"location":"arquitetura/integracoes/","title":"Integra\u00e7\u00f5es com Sistemas Externos","text":"<p>O SisCoE, embora seja em grande parte um sistema autocontido, utiliza algumas APIs externas para fornecer funcionalidades espec\u00edficas. Esta se\u00e7\u00e3o detalha essas integra\u00e7\u00f5es.</p>"},{"location":"arquitetura/integracoes/#brevo-api-para-envio-de-e-mails","title":"Brevo API (para Envio de E-mails)","text":"<p>A comunica\u00e7\u00e3o por e-mail do sistema, como redefini\u00e7\u00e3o de senhas e notifica\u00e7\u00f5es, \u00e9 gerenciada atrav\u00e9s da Brevo API (anteriormente Sendinblue).</p> <p>Finalidade: - Garantir uma entrega de e-mails confi\u00e1vel e monitor\u00e1vel. - Desacoplar a l\u00f3gica de envio de e-mail da aplica\u00e7\u00e3o principal.</p> <p>Configura\u00e7\u00e3o: A chave da API da Brevo \u00e9 configurada no arquivo de ambiente (<code>.env</code>) e lida atrav\u00e9s do <code>settings.py</code>:</p> <pre><code># settings.py\n\n# ==============================================================================\n# Configura\u00e7\u00f5es de E-mail com Brevo API\n# ==============================================================================\n\n# Configura\u00e7\u00f5es principais da API Brevo\nBREVO_API_KEY = config('BREVO_API_KEY')  # Sua chave API do Brevo\nDEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='siscoe.suporte@gmail.com')\nDEFAULT_FROM_NAME = config('DEFAULT_FROM_NAME', default='SisCoE Sistema')\n</code></pre> <p>O envio de e-mails \u00e9 abstra\u00eddo em servi\u00e7os dentro do app <code>accounts</code>, como o <code>brevo_service.py</code>, que lida diretamente com a comunica\u00e7\u00e3o com a API.</p>"},{"location":"arquitetura/integracoes/#openweathermap-api-para-dados-meteorologicos","title":"OpenWeatherMap API (para Dados Meteorol\u00f3gicos)","text":"<p>O sistema consome a API do OpenWeatherMap para exibir informa\u00e7\u00f5es de tempo, provavelmente no dashboard principal.</p> <p>Finalidade: - Fornecer dados meteorol\u00f3gicos em tempo real para os usu\u00e1rios.</p> <p>Configura\u00e7\u00e3o: A chave da API do OpenWeatherMap tamb\u00e9m \u00e9 gerenciada via vari\u00e1veis de ambiente:</p> <pre><code># settings.py\n\n# OpenWeatherMap\nWEATHER_API_KEY = os.getenv('WEATHER_API_KEY')\n</code></pre>"},{"location":"arquitetura/integracoes/#outras-integracoes","title":"Outras Integra\u00e7\u00f5es","text":"<p>Atualmente, n\u00e3o h\u00e1 outras integra\u00e7\u00f5es significativas com sistemas externos. A arquitetura do sistema foi projetada para ser modular, permitindo que futuras integra\u00e7\u00f5es (como sistemas de RH legados ou outras APIs governamentais) possam ser adicionadas atrav\u00e9s da cria\u00e7\u00e3o de novos apps ou servi\u00e7os Django.</p>"},{"location":"arquitetura/visao_geral/","title":"Vis\u00e3o Geral da Arquitetura","text":""},{"location":"arquitetura/visao_geral/#arquitetura-monolitica-com-django","title":"Arquitetura Monol\u00edtica com Django","text":"<p>O SisCoE \u00e9 constru\u00eddo sobre uma arquitetura monol\u00edtica, utilizando o framework Django. Essa abordagem foi escolhida para simplificar o desenvolvimento e o deploy em um est\u00e1gio inicial, mantendo toda a base de c\u00f3digo em um \u00fanico reposit\u00f3rio e aplica\u00e7\u00e3o.</p> <p>A arquitetura segue o padr\u00e3o MVT (Model-View-Template) do Django, com uma clara separa\u00e7\u00e3o de responsabilidades, o que facilita a manuten\u00e7\u00e3o e a escalabilidade do sistema.</p>"},{"location":"arquitetura/visao_geral/#principais-tecnologias","title":"Principais Tecnologias","text":"<ul> <li>Backend: Django 5.2, Python 3.12</li> <li>Frontend: Templates Django renderizados no servidor, com TailwindCSS para estiliza\u00e7\u00e3o.</li> <li>Banco de Dados: PostgreSQL, um sistema de gerenciamento de banco de dados relacional objeto-relacional de c\u00f3digo aberto.</li> <li>Containeriza\u00e7\u00e3o: Docker e Docker Compose para criar ambientes de desenvolvimento e produ\u00e7\u00e3o consistentes e isolados.</li> <li>Servidor de Aplica\u00e7\u00e3o: Gunicorn como servidor de aplica\u00e7\u00e3o WSGI.</li> <li>Proxy Reverso: Nginx para servir a aplica\u00e7\u00e3o e os arquivos est\u00e1ticos.</li> </ul>"},{"location":"arquitetura/visao_geral/#diagrama-de-contexto-nivel-1-c4-model","title":"Diagrama de Contexto (N\u00edvel 1 - C4 Model)","text":"<p>O diagrama abaixo ilustra o contexto geral do sistema, mostrando como os usu\u00e1rios interagem com o SisCoE e as principais depend\u00eancias externas.</p> <pre><code>graph TD\n    subgraph \"Sistema SisCoE\"\n        direction LR\n        B[Aplica\u00e7\u00e3o Web]\n    end\n\n    A[Usu\u00e1rio (Militar)] -- Acessa via Browser --&gt; B\n    B -- Envia e-mails via --&gt; C{Brevo API}\n    B -- Obt\u00e9m dados de tempo de --&gt; D{OpenWeatherMap API}\n\n    style B fill:#1E88E5,stroke:#000,stroke-width:2px,color:#fff\n</code></pre>"},{"location":"arquitetura/visao_geral/#estrutura-modular","title":"Estrutura Modular","text":"<p>O projeto \u00e9 organizado em m\u00faltiplos \"apps\" Django, cada um respons\u00e1vel por uma \u00e1rea de funcionalidade espec\u00edfica. Essa modularidade, embora dentro de um mon\u00f3lito, permite um desenvolvimento mais organizado e desacoplado.</p> <p>Os principais apps incluem:</p> <ul> <li><code>backend.accounts</code>: Gerenciamento de usu\u00e1rios, autentica\u00e7\u00e3o e perfis.</li> <li><code>backend.core</code>: Funcionalidades centrais e p\u00e1ginas est\u00e1ticas.</li> <li><code>backend.crm</code>: Gerenciamento de relacionamento com o cliente (ou militar).</li> <li><code>backend.efetivo</code>: Controle do efetivo, dados pessoais e funcionais.</li> <li><code>backend.cursos</code>: Gest\u00e3o de cursos e capacita\u00e7\u00f5es.</li> <li><code>backend.agenda</code>: Controle de agenda e eventos.</li> </ul> <p>Essa estrutura permite que cada app tenha seus pr\u00f3prios models, views, templates e testes, promovendo a reutiliza\u00e7\u00e3o de c\u00f3digo e a separa\u00e7\u00e3o de interesses.</p>"},{"location":"core/","title":"Introdu\u00e7\u00e3o ao Aplicativo Core","text":"<p>O aplicativo <code>core</code> \u00e9 respons\u00e1vel por gerenciar os perfis dos usu\u00e1rios e fornecer funcionalidades b\u00e1sicas como dashboard e p\u00e1ginas de capa.</p>"},{"location":"core/#funcionalidades-principais","title":"Funcionalidades Principais","text":"<ul> <li>Gerenciamento de perfis de usu\u00e1rios.</li> <li>Dashboard personalizado.</li> <li>P\u00e1ginas de capa e landing.</li> </ul>"},{"location":"core/models/","title":"Modelos do Aplicativo Core","text":""},{"location":"core/models/#profile","title":"<code>Profile</code>","text":"<p>O modelo <code>Profile</code> estende o modelo <code>User</code> do Django, adicionando informa\u00e7\u00f5es adicionais como posto/gradua\u00e7\u00e3o, CPF, tipo (administrativo/operacional) e imagem de perfil.</p> <p>```python from backend.accounts.models import User from django.db import models from backend.efetivo.models import Cadastro</p> <p>class Profile(models.Model):     # ... campos do modelo ...</p> <pre><code>def __str__(self):\n    return self.full_name\n\n@property\ndef grad(self):\n    # ... l\u00f3gica para exibir posto/gradua\u00e7\u00e3o com formata\u00e7\u00e3o HTML ...\n    pass\n</code></pre>"},{"location":"deploy_e_monitoramento/backup_recuperacao/","title":"Backup e Recupera\u00e7\u00e3o","text":"<p>Uma estrat\u00e9gia de backup e recupera\u00e7\u00e3o de desastres \u00e9 vital para garantir a integridade e a disponibilidade dos dados do SisCoE. Esta se\u00e7\u00e3o descreve a persist\u00eancia de dados atual e recomenda um plano de backup robusto.</p>"},{"location":"deploy_e_monitoramento/backup_recuperacao/#persistencia-de-dados-atual","title":"Persist\u00eancia de Dados Atual","text":"<p>Atualmente, a persist\u00eancia dos dados do banco de dados \u00e9 garantida pelo uso de um volume Docker nomeado (<code>pgdata</code>) para o servi\u00e7o do PostgreSQL, conforme definido no <code>docker-compose.yml</code>.</p> <pre><code>services:\n  db:\n    # ...\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n# ...\nvolumes:\n  pgdata:\n</code></pre> <p>Isso garante que os dados do banco de dados sobrevivam \u00e0 recria\u00e7\u00e3o do cont\u00eainer, mas n\u00e3o protege contra a corrup\u00e7\u00e3o de dados, exclus\u00e3o acidental ou falha do host. Portanto, n\u00e3o \u00e9 uma estrat\u00e9gia de backup completa.</p>"},{"location":"deploy_e_monitoramento/backup_recuperacao/#estrategia-de-backup-recomendada","title":"Estrat\u00e9gia de Backup Recomendada","text":""},{"location":"deploy_e_monitoramento/backup_recuperacao/#1-backup-do-banco-de-dados-postgresql","title":"1. Backup do Banco de Dados (PostgreSQL)","text":"<p>A abordagem mais comum e recomendada para fazer backup de um banco de dados PostgreSQL \u00e9 utilizar o utilit\u00e1rio <code>pg_dump</code>. Este comando pode ser executado periodicamente atrav\u00e9s de um script e um <code>cron job</code> no servidor host.</p> <p>Script de Backup (<code>backup.sh</code>):</p> <pre><code>#!/bin/bash\n\n# Vari\u00e1veis\nDB_CONTAINER_NAME=\"siscoe.db\"\nDB_USER=\"postgres\"\nDB_NAME=\"siscoe_db\"\nBACKUP_DIR=\"/path/to/backups\"\nDATE=$(date +%Y-%m-%d_%H-%M-%S)\nBACKUP_FILE=\"$BACKUP_DIR/siscoe_db_backup_$DATE.sql.gz\"\n\n# Cria o diret\u00f3rio de backup se ele n\u00e3o existir\nmkdir -p $BACKUP_DIR\n\n# Executa o pg_dump dentro do cont\u00eainer e comprime a sa\u00edda\ndocker exec $DB_CONTAINER_NAME pg_dump -U $DB_USER -d $DB_NAME | gzip &gt; $BACKUP_FILE\n\n# (Opcional) Remove backups mais antigos que 7 dias\nfind $BACKUP_DIR -type f -name \"*.sql.gz\" -mtime +7 -delete\n</code></pre> <p>Este script deve ser agendado para rodar diariamente (ou com a frequ\u00eancia desejada) usando um <code>cron job</code>.</p>"},{"location":"deploy_e_monitoramento/backup_recuperacao/#2-backup-de-arquivos-de-midia","title":"2. Backup de Arquivos de M\u00eddia","text":"<p>Os arquivos enviados pelos usu\u00e1rios (como fotos de perfil) s\u00e3o armazenados no diret\u00f3rio <code>media/</code>, conforme definido em <code>settings.py</code>. Este diret\u00f3rio tamb\u00e9m precisa ser inclu\u00eddo na rotina de backup.</p> <p>Um comando <code>rsync</code> ou <code>tar</code> pode ser usado para arquivar e comprimir este diret\u00f3rio periodicamente.</p> <pre><code>tar -czf /path/to/backups/siscoe_media_$DATE.tar.gz /path/to/project/media/\n</code></pre>"},{"location":"deploy_e_monitoramento/backup_recuperacao/#estrategia-de-recuperacao","title":"Estrat\u00e9gia de Recupera\u00e7\u00e3o","text":""},{"location":"deploy_e_monitoramento/backup_recuperacao/#1-recuperacao-do-banco-de-dados","title":"1. Recupera\u00e7\u00e3o do Banco de Dados","text":"<p>Para restaurar um backup do banco de dados, o processo inverso \u00e9 realizado:</p> <ol> <li>Copie o arquivo de backup para o servidor, se necess\u00e1rio.</li> <li>Crie um banco de dados vazio no cont\u00eainer do PostgreSQL.</li> <li>Importe o backup usando o utilit\u00e1rio <code>psql</code>.</li> </ol> <p>Script de Restaura\u00e7\u00e3o (<code>restore.sh</code>):</p> <pre><code>#!/bin/bash\n\n# Vari\u00e1veis\nDB_CONTAINER_NAME=\"siscoe.db\"\nDB_USER=\"postgres\"\nDB_NAME=\"siscoe_db\"\nBACKUP_FILE=\"/path/to/backup/to/restore.sql.gz\"\n\n# Comando de restaura\u00e7\u00e3o\ngunzip &lt; $BACKUP_FILE | docker exec -i $DB_CONTAINER_NAME psql -U $DB_USER -d $DB_NAME\n</code></pre>"},{"location":"deploy_e_monitoramento/backup_recuperacao/#2-recuperacao-dos-arquivos-de-midia","title":"2. Recupera\u00e7\u00e3o dos Arquivos de M\u00eddia","text":"<p>Basta descompactar o arquivo de backup do diret\u00f3rio <code>media/</code> no local apropriado.</p> <pre><code>tar -xzf /path/to/backup/siscoe_media.tar.gz -C /path/to/project/\n</code></pre> <p>A implementa\u00e7\u00e3o de uma rotina de backup automatizada e testada regularmente \u00e9 um passo cr\u00edtico para a estabilidade e seguran\u00e7a do sistema em produ\u00e7\u00e3o.</p>"},{"location":"deploy_e_monitoramento/ci_cd/","title":"CI/CD (Integra\u00e7\u00e3o e Entrega Cont\u00ednua)","text":"<p>Atualmente, o projeto SisCoE n\u00e3o possui um pipeline de CI/CD formalmente implementado. Esta se\u00e7\u00e3o descreve uma proposta de fluxo de trabalho de CI/CD utilizando GitHub Actions, que pode ser adotada para automatizar os processos de teste e deploy, melhorando a qualidade e a velocidade das entregas.</p>"},{"location":"deploy_e_monitoramento/ci_cd/#objetivos-do-cicd","title":"Objetivos do CI/CD","text":"<ul> <li>Integra\u00e7\u00e3o Cont\u00ednua (CI): Automatizar a execu\u00e7\u00e3o de testes e a verifica\u00e7\u00e3o da qualidade do c\u00f3digo a cada novo commit, garantindo que novas altera\u00e7\u00f5es n\u00e3o quebrem a funcionalidade existente.</li> <li>Entrega Cont\u00ednua (CD): Automatizar o processo de deploy da aplica\u00e7\u00e3o em um ambiente de homologa\u00e7\u00e3o ou produ\u00e7\u00e3o ap\u00f3s a passagem bem-sucedida pelo pipeline de CI.</li> </ul>"},{"location":"deploy_e_monitoramento/ci_cd/#proposta-de-pipeline-de-cicd","title":"Proposta de Pipeline de CI/CD","text":"<p>O diagrama abaixo ilustra um fluxo de trabalho recomendado para o CI/CD do SisCoE.</p> <pre><code>flowchart LR\n    A[Developer faz commit] -- Push --&gt; B(GitHub Repository)\n    B -- Trigger --&gt; C{GitHub Actions}\n    subgraph \"CI Pipeline\"\n        direction TB\n        C --&gt; D[1. Build da Imagem Docker]\n        D --&gt; E[2. Execu\u00e7\u00e3o dos Testes]\n        E -- Sucesso --&gt; F[3. Push da Imagem para o Docker Hub]\n    end\n    F -- Trigger --&gt; G{Deploy no Servidor}\n    subgraph \"CD Pipeline\"\n        direction TB\n        G --&gt; H[1. Pull da nova imagem]\n        H --&gt; I[2. Executa as migra\u00e7\u00f5es do banco]\n        I --&gt; J[3. Reinicia os cont\u00eaineres da aplica\u00e7\u00e3o]\n    end\n</code></pre>"},{"location":"deploy_e_monitoramento/ci_cd/#pipeline-de-integracao-continua-ci","title":"Pipeline de Integra\u00e7\u00e3o Cont\u00ednua (CI)","text":"<p>Este pipeline seria acionado a cada <code>push</code> para as branches <code>main</code> ou <code>develop</code>, ou a cada abertura de Pull Request.</p> <p>Passos: 1.  Checkout do C\u00f3digo: O workflow do GitHub Actions faz o checkout da vers\u00e3o mais recente do c\u00f3digo. 2.  Build da Imagem Docker: A imagem da aplica\u00e7\u00e3o Django \u00e9 constru\u00edda utilizando o <code>Dockerfile</code> e o <code>docker-compose</code>. Isso garante que o ambiente de teste seja id\u00eantico ao de produ\u00e7\u00e3o. 3.  Execu\u00e7\u00e3o dos Testes: O comando <code>python manage.py test</code> \u00e9 executado dentro do cont\u00eainer da aplica\u00e7\u00e3o para rodar todos os testes unit\u00e1rios e de integra\u00e7\u00e3o. 4.  An\u00e1lise de C\u00f3digo (Opcional): Ferramentas de an\u00e1lise est\u00e1tica de c\u00f3digo (linting), como <code>Flake8</code> ou <code>Ruff</code>, podem ser executadas para garantir a conformidade com as conven\u00e7\u00f5es de c\u00f3digo. 5.  Push da Imagem (em caso de sucesso): Se todos os testes passarem, a imagem Docker constru\u00edda \u00e9 tagueada com a vers\u00e3o do commit e enviada para um registro de cont\u00eaineres, como o Docker Hub ou o GitHub Container Registry.</p>"},{"location":"deploy_e_monitoramento/ci_cd/#pipeline-de-entrega-continua-cd","title":"Pipeline de Entrega Cont\u00ednua (CD)","text":"<p>Este pipeline seria acionado manualmente ou automaticamente ap\u00f3s a conclus\u00e3o bem-sucedida do pipeline de CI em uma branch de produ\u00e7\u00e3o (como a <code>main</code>).</p> <p>Passos: 1.  Conex\u00e3o com o Servidor: O workflow se conecta ao servidor de produ\u00e7\u00e3o via SSH. 2.  Pull da Nova Imagem: O servidor de produ\u00e7\u00e3o baixa a nova vers\u00e3o da imagem da aplica\u00e7\u00e3o a partir do registro de cont\u00eaineres. 3.  Atualiza\u00e7\u00e3o da Aplica\u00e7\u00e3o: O <code>docker-compose</code> \u00e9 utilizado para reiniciar os servi\u00e7os, utilizando a nova imagem.     <pre><code>docker-compose pull app\ndocker-compose up -d --no-deps app\n</code></pre> 4.  Execu\u00e7\u00e3o de Migra\u00e7\u00f5es: O comando <code>python manage.py migrate</code> \u00e9 executado no novo cont\u00eainer da aplica\u00e7\u00e3o para aplicar quaisquer migra\u00e7\u00f5es de banco de dados pendentes.</p> <p>A implementa\u00e7\u00e3o deste pipeline de CI/CD traria mais seguran\u00e7a e agilidade ao processo de desenvolvimento e deploy do SisCoE.</p>"},{"location":"deploy_e_monitoramento/docker/","title":"Deploy com Docker","text":"<p>A containeriza\u00e7\u00e3o \u00e9 uma parte central da estrat\u00e9gia de deploy e do ambiente de desenvolvimento do SisCoE. O projeto utiliza Docker e Docker Compose para garantir consist\u00eancia, portabilidade e isolamento dos servi\u00e7os.</p>"},{"location":"deploy_e_monitoramento/docker/#dockerfile","title":"<code>Dockerfile</code>","text":"<p>O <code>Dockerfile</code> na raiz do projeto cont\u00e9m a \"receita\" para construir a imagem da aplica\u00e7\u00e3o Django. Suas principais responsabilidades s\u00e3o:</p> <ol> <li>Imagem Base: Utiliza uma imagem base do Python.</li> <li>Copia o C\u00f3digo: Copia o c\u00f3digo-fonte da aplica\u00e7\u00e3o para dentro da imagem.</li> <li>Instala Depend\u00eancias: Instala as depend\u00eancias Python listadas no <code>requirements.txt</code>.</li> <li>Exp\u00f5e a Porta: Exp\u00f5e a porta em que a aplica\u00e7\u00e3o Django ser\u00e1 executada (geralmente a porta 8000).</li> <li>Comando de Execu\u00e7\u00e3o: Define o comando padr\u00e3o para iniciar a aplica\u00e7\u00e3o quando um cont\u00eainer for criado a partir da imagem (usando <code>gunicorn</code>).</li> </ol>"},{"location":"deploy_e_monitoramento/docker/#docker-composeyml","title":"<code>docker-compose.yml</code>","text":"<p>Este arquivo orquestra a execu\u00e7\u00e3o de todos os cont\u00eaineres que comp\u00f5em o sistema. Ele define os seguintes servi\u00e7os:</p> <ul> <li> <p><code>db</code>:</p> <ul> <li>Imagem: <code>postgres:17-alpine</code></li> <li>Responsabilidade: Cont\u00eainer do banco de dados PostgreSQL.</li> <li>Volumes: Utiliza um volume nomeado (<code>pgdata</code>) para persistir os dados do banco de dados, garantindo que eles n\u00e3o sejam perdidos quando o cont\u00eainer \u00e9 recriado.</li> <li>Rede: Conectado \u00e0 rede <code>siscoe-network</code>.</li> </ul> </li> <li> <p><code>app</code>:</p> <ul> <li>Build: Constr\u00f3i a imagem a partir do <code>Dockerfile</code> local.</li> <li>Responsabilidade: O cont\u00eainer da aplica\u00e7\u00e3o Django.</li> <li>Comando: Inicia o servidor de aplica\u00e7\u00e3o <code>gunicorn</code>.</li> <li>Depend\u00eancias: Depende do servi\u00e7o <code>db</code>, garantindo que o banco de dados seja iniciado antes da aplica\u00e7\u00e3o.</li> <li>Rede: Conectado \u00e0 rede <code>siscoe-network</code>.</li> </ul> </li> <li> <p><code>nginx</code>:</p> <ul> <li>Imagem: <code>nginx</code></li> <li>Responsabilidade: Atua como um proxy reverso. Ele recebe as requisi\u00e7\u00f5es HTTP na porta 80 e as encaminha para a aplica\u00e7\u00e3o Django na porta 8000. Tamb\u00e9m \u00e9 respons\u00e1vel por servir os arquivos est\u00e1ticos de forma eficiente.</li> <li>Volumes: Monta o arquivo de configura\u00e7\u00e3o do Nginx de <code>docker/config/nginx/</code> para dentro do cont\u00eainer.</li> <li>Depend\u00eancias: Depende do servi\u00e7o <code>app</code>.</li> <li>Rede: Conectado \u00e0 rede <code>siscoe-network</code>.</li> </ul> </li> <li> <p><code>pgadmin</code>:</p> <ul> <li>Imagem: <code>dpage/pgadmin4</code></li> <li>Responsabilidade: Fornece uma interface web para administrar o banco de dados PostgreSQL, \u00fatil para desenvolvimento e debugging.</li> </ul> </li> <li> <p><code>mailhog</code>:</p> <ul> <li>Imagem: <code>mailhog/mailhog</code></li> <li>Responsabilidade: Um servidor de e-mail falso que captura todos os e-mails enviados pela aplica\u00e7\u00e3o Django durante o desenvolvimento, permitindo visualiz\u00e1-los em uma interface web sem envi\u00e1-los para destinat\u00e1rios reais.</li> </ul> </li> </ul>"},{"location":"deploy_e_monitoramento/docker/#como-executar-com-docker","title":"Como Executar com Docker","text":"<p>Construir e iniciar os cont\u00eaineres: <pre><code>docker-compose up --build -d\n</code></pre> - <code>--build</code>: For\u00e7a a reconstru\u00e7\u00e3o da imagem da aplica\u00e7\u00e3o se houver altera\u00e7\u00f5es no <code>Dockerfile</code> ou no c\u00f3digo-fonte. - <code>-d</code>: Executa os cont\u00eaineres em modo \"detached\" (em segundo plano).</p> <p>Parar os cont\u00eaineres: <pre><code>docker-compose down\n</code></pre></p> <p>Visualizar os logs: <pre><code>docker-compose logs -f &lt;nome_do_servico&gt;\n# Exemplo:\ndocker-compose logs -f app\n</code></pre></p>"},{"location":"deploy_e_monitoramento/logs_monitoramento/","title":"Logs e Monitoramento","text":"<p>A observabilidade \u00e9 crucial para manter a sa\u00fade e a performance da aplica\u00e7\u00e3o em produ\u00e7\u00e3o. Esta se\u00e7\u00e3o descreve a configura\u00e7\u00e3o de logs atual e sugere melhorias para um monitoramento mais robusto.</p>"},{"location":"deploy_e_monitoramento/logs_monitoramento/#configuracao-de-logs-do-django","title":"Configura\u00e7\u00e3o de Logs do Django","text":"<p>O SisCoE possui uma configura\u00e7\u00e3o de logging no arquivo <code>settings.py</code>, que direciona os logs para dois locais:</p> <ol> <li>Console: Logs s\u00e3o enviados para a sa\u00edda padr\u00e3o (<code>stdout</code>), o que permite que sejam facilmente capturados pelo Docker.</li> <li>Arquivo: Logs de n\u00edvel <code>DEBUG</code> e superiores s\u00e3o salvos no arquivo <code>debug.log</code> na raiz do projeto.</li> </ol> <p>Trecho da configura\u00e7\u00e3o (<code>settings.py</code>): <pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'verbose': {\n            'format': '{levelname} {asctime} {module} {message}',\n            'style': '{',\n        },\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n        'file': {\n            'level': 'DEBUG',\n            'class': 'logging.FileHandler',\n            'filename': 'debug.log',\n            'formatter': 'verbose'\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['console', 'file'],\n            'level': 'INFO',\n            'propagate': False,\n        },\n    }\n}\n</code></pre></p>"},{"location":"deploy_e_monitoramento/logs_monitoramento/#acessando-logs-via-docker","title":"Acessando Logs via Docker","text":"<p>Quando a aplica\u00e7\u00e3o est\u00e1 rodando via Docker Compose, a maneira mais f\u00e1cil de visualizar os logs em tempo real \u00e9 atrav\u00e9s do comando:</p> <pre><code># Para visualizar os logs do cont\u00eainer da aplica\u00e7\u00e3o Django\ndocker-compose logs -f app\n\n# Para visualizar os logs do Nginx\ndocker-compose logs -f nginx\n</code></pre>"},{"location":"deploy_e_monitoramento/logs_monitoramento/#recomendacoes-para-monitoramento","title":"Recomenda\u00e7\u00f5es para Monitoramento","text":"<p>A configura\u00e7\u00e3o atual \u00e9 adequada para desenvolvimento, mas para um ambiente de produ\u00e7\u00e3o, um sistema de monitoramento mais completo \u00e9 recomendado.</p>"},{"location":"deploy_e_monitoramento/logs_monitoramento/#1-logging-estruturado","title":"1. Logging Estruturado","text":"<p>Em vez de logs em texto plano, adote o logging estruturado (ex: JSON). Isso facilita a busca, a filtragem e a an\u00e1lise dos logs em ferramentas centralizadas. Bibliotecas como <code>python-json-logger</code> podem ser integradas ao Django.</p>"},{"location":"deploy_e_monitoramento/logs_monitoramento/#2-centralizacao-de-logs","title":"2. Centraliza\u00e7\u00e3o de Logs","text":"<p>Utilize uma stack de centraliza\u00e7\u00e3o de logs como o Loki com Grafana ou o ELK Stack (Elasticsearch, Logstash, Kibana). Os cont\u00eaineres seriam configurados para enviar seus logs para um desses sistemas, permitindo a visualiza\u00e7\u00e3o e a cria\u00e7\u00e3o de alertas em um \u00fanico dashboard.</p>"},{"location":"deploy_e_monitoramento/logs_monitoramento/#3-monitoramento-de-metricas-com-prometheus-e-grafana","title":"3. Monitoramento de M\u00e9tricas com Prometheus e Grafana","text":"<ul> <li>Prometheus: Uma ferramenta de monitoramento que coleta m\u00e9tricas da aplica\u00e7\u00e3o em intervalos de tempo. Uma biblioteca como <code>django-prometheus</code> pode ser usada para expor m\u00e9tricas da aplica\u00e7\u00e3o Django (ex: n\u00famero de requisi\u00e7\u00f5es, tempo de resposta, erros 5xx).</li> <li>Grafana: Uma ferramenta de visualiza\u00e7\u00e3o que se conecta ao Prometheus para criar dashboards e alertas. Com o Grafana, seria poss\u00edvel monitorar a sa\u00fade da aplica\u00e7\u00e3o, o consumo de recursos dos cont\u00eaineres e o tr\u00e1fego de rede em tempo real.</li> </ul>"},{"location":"deploy_e_monitoramento/logs_monitoramento/#4-rastreamento-de-erros-error-tracking","title":"4. Rastreamento de Erros (Error Tracking)","text":"<p>Integre um servi\u00e7o de rastreamento de erros como o Sentry ou o GlitchTip. Essas ferramentas capturam exce\u00e7\u00f5es n\u00e3o tratadas na aplica\u00e7\u00e3o em tempo real, agrupam-nas, e notificam a equipe de desenvolvimento com o stack trace completo, facilitando a depura\u00e7\u00e3o de problemas em produ\u00e7\u00e3o.</p>"},{"location":"desenvolvimento/api_endpoints/","title":"API Endpoints e Comunica\u00e7\u00e3o AJAX","text":"<p>Embora o SisCoE seja uma aplica\u00e7\u00e3o majoritariamente renderizada no servidor, ele utiliza chamadas AJAX (Asynchronous JavaScript and XML) para diversas funcionalidades din\u00e2micas, como atualiza\u00e7\u00f5es parciais de p\u00e1gina, valida\u00e7\u00f5es e intera\u00e7\u00f5es em tempo real.</p> <p>Esses endpoints n\u00e3o seguem uma arquitetura REST estrita, mas funcionam como uma API interna, geralmente retornando respostas em formato JSON.</p>"},{"location":"desenvolvimento/api_endpoints/#padrao-de-resposta","title":"Padr\u00e3o de Resposta","text":"<p>A maioria dos endpoints que respondem a chamadas AJAX retorna um objeto JSON com uma estrutura semelhante a esta:</p> <p><pre><code>{\n  \"success\": true,\n  \"message\": \"Opera\u00e7\u00e3o realizada com sucesso!\",\n  \"data\": { ... }\n}\n</code></pre> - <code>success</code>: Um booleano indicando se a opera\u00e7\u00e3o foi bem-sucedida. - <code>message</code>: Uma mensagem descritiva para o usu\u00e1rio. - <code>data</code>: Um objeto contendo os dados solicitados (em caso de <code>GET</code>) ou dados atualizados (em caso de <code>POST</code>).</p>"},{"location":"desenvolvimento/api_endpoints/#endpoints-por-app","title":"Endpoints por App","text":"<p>Abaixo est\u00e3o alguns dos principais endpoints AJAX encontrados no sistema.</p>"},{"location":"desenvolvimento/api_endpoints/#app-agenda","title":"App <code>agenda</code>","text":"<p>Utilizado para a funcionalidade de calend\u00e1rio interativo.</p> <ul> <li><code>POST /agenda/criar_lembrete/</code>: Cria um novo lembrete para o usu\u00e1rio logado.</li> <li><code>POST /agenda/criar_tarefa/</code>: Cria uma nova tarefa.</li> <li><code>GET /agenda/get_eventos/</code>: Retorna uma lista de todos os eventos (lembretes e tarefas) do usu\u00e1rio em formato JSON para serem exibidos no FullCalendar.</li> <li><code>DELETE /agenda/excluir_lembrete/&lt;int:pk&gt;/</code>: Exclui um lembrete.</li> </ul>"},{"location":"desenvolvimento/api_endpoints/#app-efetivo","title":"App <code>efetivo</code>","text":"<p>Cont\u00e9m v\u00e1rios endpoints para manipula\u00e7\u00e3o de dados do efetivo de forma din\u00e2mica.</p> <ul> <li><code>POST /efetivo/atualizar_imagem_perfil/&lt;int:cadastro_id&gt;/</code>: Realiza o upload e a atualiza\u00e7\u00e3o da foto de perfil de um militar.</li> <li><code>GET /efetivo/check_re_existente/</code>: Verifica se um determinado RE (Registro de Efetivo) j\u00e1 existe no banco de dados. Usado para valida\u00e7\u00e3o em formul\u00e1rios.</li> <li><code>POST /efetivo/atualizar_categoria/&lt;int:pk&gt;/</code>: Atualiza a categoria de um militar (ativo, inativo, licen\u00e7a, etc.).</li> </ul>"},{"location":"desenvolvimento/api_endpoints/#app-lp-licenca-premio","title":"App <code>lp</code> (Licen\u00e7a Pr\u00eamio)","text":"<p>Endpoints relacionados ao c\u00e1lculo e visualiza\u00e7\u00e3o de Licen\u00e7a Pr\u00eamio.</p> <ul> <li><code>GET /lp/calcular_lp/</code>: Endpoint que recebe dados de um militar e retorna o c\u00e1lculo de sua Licen\u00e7a Pr\u00eamio.</li> <li><code>GET /lp/get_militar_data/</code>: Busca dados de um militar espec\u00edfico para preencher formul\u00e1rios dinamicamente.</li> </ul>"},{"location":"desenvolvimento/api_endpoints/#app-cursos","title":"App <code>cursos</code>","text":"<p>Endpoints para gerenciar cursos e medalhas.</p> <ul> <li><code>GET /cursos/api/cursos/</code>: Retorna uma lista de cursos para um determinado militar.</li> <li><code>POST /cursos/api/medalha/adicionar/</code>: Adiciona uma nova medalha a um militar.</li> <li><code>DELETE /cursos/api/medalha/excluir/&lt;int:pk&gt;/</code>: Exclui uma medalha.</li> </ul>"},{"location":"desenvolvimento/api_endpoints/#conclusao","title":"Conclus\u00e3o","text":"<p>A aplica\u00e7\u00e3o faz uso extensivo de <code>JsonResponse</code> para criar uma experi\u00eancia de usu\u00e1rio mais rica e din\u00e2mica, evitando recarregamentos completos de p\u00e1gina para muitas opera\u00e7\u00f5es. Ao desenvolver novas funcionalidades, o padr\u00e3o de usar views que respondem a requisi\u00e7\u00f5es AJAX com JSON deve ser mantido para consist\u00eancia.</p>"},{"location":"desenvolvimento/backend/","title":"Desenvolvimento Backend","text":"<p>O backend do SisCoE \u00e9 uma aplica\u00e7\u00e3o monol\u00edtica constru\u00edda com o framework Django, escrito em Python. Ele \u00e9 respons\u00e1vel por toda a l\u00f3gica de neg\u00f3cio, processamento de dados, autentica\u00e7\u00e3o e por servir os templates do frontend.</p>"},{"location":"desenvolvimento/backend/#framework-django","title":"Framework Django","text":"<p>O projeto utiliza o Django e segue sua arquitetura MVT (Model-View-Template):</p> <ul> <li>Models (<code>models.py</code>): Definem a estrutura dos dados e a rela\u00e7\u00e3o entre eles. S\u00e3o a \u00fanica fonte de verdade sobre os dados do sistema, mapeando diretamente para as tabelas do banco de dados.</li> <li>Views (<code>views.py</code>): Cont\u00eam a l\u00f3gica que processa as requisi\u00e7\u00f5es HTTP. As views recebem a requisi\u00e7\u00e3o, interagem com os models para buscar ou manipular dados, e renderizam um template como resposta.</li> <li>Templates (<code>templates/</code>): Camada de apresenta\u00e7\u00e3o, respons\u00e1vel por exibir os dados para o usu\u00e1rio.</li> </ul>"},{"location":"desenvolvimento/backend/#estrutura-de-apps","title":"Estrutura de Apps","text":"<p>O backend \u00e9 dividido em m\u00faltiplos \"apps\" Django, cada um encapsulando uma funcionalidade de neg\u00f3cio. Esta abordagem, conhecida como \"pluggable apps\", \u00e9 uma das for\u00e7as do Django e permite uma organiza\u00e7\u00e3o de c\u00f3digo limpa e modular.</p> <p>Os principais apps e suas responsabilidades est\u00e3o descritos na se\u00e7\u00e3o Componentes do Sistema.</p>"},{"location":"desenvolvimento/backend/#principais-bibliotecas-e-dependencias","title":"Principais Bibliotecas e Depend\u00eancias","text":"<p>O arquivo <code>requirements.txt</code> lista todas as depend\u00eancias do backend. Algumas das mais importantes s\u00e3o:</p> <ul> <li><code>Django</code>: O framework web principal.</li> <li><code>psycopg2-binary</code>: Adaptador do banco de dados PostgreSQL para Python, permitindo a comunica\u00e7\u00e3o entre o Django e o banco.</li> <li><code>gunicorn</code>: Servidor de aplica\u00e7\u00e3o WSGI, usado para rodar a aplica\u00e7\u00e3o em produ\u00e7\u00e3o.</li> <li><code>python-decouple</code>: Usado para separar as configura\u00e7\u00f5es do c\u00f3digo, permitindo carregar vari\u00e1veis de ambiente a partir de arquivos <code>.env</code>.</li> <li><code>argon2-cffi</code>: Biblioteca para hashing de senhas. O Argon2 \u00e9 o algoritmo de hashing padr\u00e3o recomendado pelo Django para seguran\u00e7a de senhas.</li> <li><code>django-import-export</code>: Facilita a importa\u00e7\u00e3o e exporta\u00e7\u00e3o de dados em formatos como CSV, XLS, etc., muito utilizado na interface de administra\u00e7\u00e3o do Django.</li> </ul>"},{"location":"desenvolvimento/backend/#utilitario-managepy","title":"Utilit\u00e1rio <code>manage.py</code>","text":"<p>O <code>manage.py</code> \u00e9 um script de linha de comando que serve como o ponto de entrada para interagir com a aplica\u00e7\u00e3o Django.</p> <p>Comandos mais comuns:</p> <ul> <li><code>python manage.py runserver</code>: Inicia o servidor de desenvolvimento.</li> <li><code>python manage.py migrate</code>: Aplica as migra\u00e7\u00f5es do banco de dados.</li> <li><code>python manage.py makemigrations</code>: Cria novos arquivos de migra\u00e7\u00e3o baseados nas altera\u00e7\u00f5es feitas nos <code>models.py</code>.</li> <li><code>python manage.py createsuperuser</code>: Cria um usu\u00e1rio administrador.</li> <li><code>python manage.py shell</code>: Abre um shell interativo do Python com o ambiente do Django carregado, \u00fatil para debugging e testes.</li> </ul>"},{"location":"desenvolvimento/banco_de_dados/","title":"Banco de Dados","text":"<p>O SisCoE utiliza um banco de dados relacional para persistir todos os dados da aplica\u00e7\u00e3o. A intera\u00e7\u00e3o com o banco \u00e9 gerenciada quase que exclusivamente pelo ORM (Object-Relational Mapper) do Django.</p>"},{"location":"desenvolvimento/banco_de_dados/#sistema-de-gerenciamento-de-banco-de-dados-sgbd","title":"Sistema de Gerenciamento de Banco de Dados (SGBD)","text":"<ul> <li>Produ\u00e7\u00e3o: O ambiente de produ\u00e7\u00e3o, orquestrado com Docker, utiliza o PostgreSQL, um SGBD de c\u00f3digo aberto robusto e altamente escal\u00e1vel.</li> <li>Desenvolvimento: O arquivo <code>settings.py</code> padr\u00e3o est\u00e1 configurado para usar SQLite.</li> </ul> <p>\u26a0\ufe0f Recomenda\u00e7\u00e3o: Para garantir a paridade entre os ambientes e evitar bugs que s\u00f3 aparecem em produ\u00e7\u00e3o, \u00e9 fortemente recomendado configurar o ambiente de desenvolvimento para tamb\u00e9m utilizar o PostgreSQL atrav\u00e9s do Docker.</p>"},{"location":"desenvolvimento/banco_de_dados/#orm-do-django-e-models","title":"ORM do Django e Models","text":"<p>O Django possui um ORM poderoso que abstrai as intera\u00e7\u00f5es com o banco de dados. Em vez de escrever SQL, os desenvolvedores definem Modelos (classes Python) que o Django traduz para tabelas e consultas SQL.</p> <ul> <li>Defini\u00e7\u00e3o de Modelos: Os modelos s\u00e3o definidos no arquivo <code>models.py</code> de cada app. Cada classe de modelo representa uma tabela no banco de dados, e cada atributo da classe representa uma coluna.</li> </ul> <p>Exemplo (<code>efetivo/models.py</code>): <pre><code>class Cadastro(models.Model):\n    id = models.AutoField(primary_key=True)\n    re = models.CharField(max_length=6,  blank=False, null=False, unique=True)\n    dig = models.CharField(max_length=1, blank=False, null=False)\n    nome = models.CharField(max_length=50, blank=False, null=False)\n    nome_de_guerra = models.CharField(max_length=20, blank=False, null=False)\n    nasc = models.DateField(blank=False, null=False)\n    cpf = models.CharField(max_length=14, blank=False, null=False, unique=True)\n    email = models.EmailField(max_length=100, unique=True, blank=False, null=False)\n\n    def __str__(self):\n        return f'{self.re} {self.dig} {self.nome_de_guerra}'\n\n    class Meta:\n        ordering = ('re',)\n</code></pre></p>"},{"location":"desenvolvimento/banco_de_dados/#migracoes-migrations","title":"Migra\u00e7\u00f5es (Migrations)","text":"<p>O Django utiliza um sistema de migra\u00e7\u00f5es para gerenciar as altera\u00e7\u00f5es no esquema do banco de dados de forma versionada e controlada.</p> <ul> <li> <p><code>makemigrations</code>: Este comando inspeciona as altera\u00e7\u00f5es nos seus arquivos <code>models.py</code> e cria um novo arquivo de migra\u00e7\u00e3o no diret\u00f3rio <code>migrations/</code> do respectivo app.   <pre><code>python manage.py makemigrations &lt;nome_do_app&gt;\n</code></pre></p> </li> <li> <p><code>migrate</code>: Este comando aplica as migra\u00e7\u00f5es pendentes ao banco de dados, alterando as tabelas, colunas, etc.   <pre><code>python manage.py migrate\n</code></pre></p> </li> </ul> <p>Esse fluxo de trabalho garante que as altera\u00e7\u00f5es no banco de dados sejam consistentes e aplic\u00e1veis em qualquer ambiente.</p>"},{"location":"desenvolvimento/banco_de_dados/#diagrama-entidade-relacionamento-simplificado","title":"Diagrama Entidade-Relacionamento (Simplificado)","text":"<p>O diagrama abaixo mostra a rela\u00e7\u00e3o entre as principais entidades do sistema.</p> <p><pre><code>erDiagram\n    USERS {\n        int id PK\n        varchar email\n        varchar first_name\n        varchar last_name\n    }\n    CADASTRO {\n        int id PK\n        varchar re\n        varchar nome\n        varchar cpf\n        varchar email\n    }\n    PROMOCAO {\n        int id PK\n        varchar posto_grad\n        date ultima_promocao\n    }\n    CURSO {\n        int id PK\n        varchar curso\n        date data_publicacao\n    }\n\n    USERS ||--o| CADASTRO : \"est\u00e1 associado a\"\n    CADASTRO ||--|{ PROMOCAO : \"tem\"\n    CADASTRO ||--|{ CURSO : \"realizou\"\n</code></pre> Nota: Este \u00e9 um diagrama simplificado para fins ilustrativos.</p>"},{"location":"desenvolvimento/configuracao_ambiente/","title":"Configura\u00e7\u00e3o do Ambiente de Desenvolvimento","text":"<p>Este guia descreve os passos necess\u00e1rios para configurar o ambiente de desenvolvimento do SisCoE em uma m\u00e1quina local. A configura\u00e7\u00e3o utiliza Docker para os servi\u00e7os de banco de dados e Python <code>venv</code> para o ambiente da aplica\u00e7\u00e3o.</p>"},{"location":"desenvolvimento/configuracao_ambiente/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Git</li> <li>Python 3.12 ou superior</li> <li>Docker e Docker Compose</li> </ul>"},{"location":"desenvolvimento/configuracao_ambiente/#1-clonar-o-repositorio","title":"1. Clonar o Reposit\u00f3rio","text":"<p>Primeiro, clone o reposit\u00f3rio do projeto a partir do GitHub:</p> <pre><code>git clone git@github.com:Andre-fdias/SisCoE.git\ncd SisCoE\n</code></pre>"},{"location":"desenvolvimento/configuracao_ambiente/#2-configurar-o-ambiente-virtual-python","title":"2. Configurar o Ambiente Virtual Python","text":"<p>Para isolar as depend\u00eancias do projeto, crie um ambiente virtual:</p> <pre><code>python3 -m venv venv\n</code></pre> <p>Ative o ambiente virtual:</p> <p>No Linux/macOS: <pre><code>source venv/bin/activate\n</code></pre></p> <p>No Windows: <pre><code>.\\venv\\Scripts\\activate\n</code></pre></p>"},{"location":"desenvolvimento/configuracao_ambiente/#3-instalar-as-dependencias","title":"3. Instalar as Depend\u00eancias","text":"<p>Com o ambiente virtual ativado, instale as depend\u00eancias Python listadas no arquivo <code>requirements.txt</code>:</p> <p><pre><code>pip install -r requirements.txt\n</code></pre> Nota: O arquivo <code>requirements.txt</code> no reposit\u00f3rio pode conter pacotes com nomes incorretos (<code>redis-6.4.0</code>, <code>brevo-python-1.2.0</code>). Eles foram corrigidos para <code>redis</code> e <code>brevo-python</code> para que a instala\u00e7\u00e3o funcione.</p>"},{"location":"desenvolvimento/configuracao_ambiente/#4-configurar-variaveis-de-ambiente","title":"4. Configurar Vari\u00e1veis de Ambiente","text":"<p>O projeto utiliza um arquivo <code>.env</code> para gerenciar vari\u00e1veis de ambiente. O <code>docker-compose.yml</code> espera um arquivo <code>.env.docker</code>.</p> <p>Crie um arquivo <code>.env.docker</code> na raiz do projeto. Voc\u00ea pode copiar o arquivo <code>contrib/env_gen.py</code> (se existir um template) ou cri\u00e1-lo do zero com as seguintes vari\u00e1veis essenciais:</p> <pre><code># Chave secreta do Django (gere uma nova)\nSECRET_KEY='sua-chave-secreta-aqui'\n\n# Configura\u00e7\u00f5es de Debug\nDEBUG=True\n\n# Hosts permitidos\nALLOWED_HOSTS=localhost,127.0.0.1\n\n# Chaves de API (deixe em branco se n\u00e3o for usar as integra\u00e7\u00f5es)\nBREVO_API_KEY=\nGROQ_API_KEY=\nWEATHER_API_KEY=\n</code></pre>"},{"location":"desenvolvimento/configuracao_ambiente/#5-iniciar-os-servicos-com-docker","title":"5. Iniciar os Servi\u00e7os com Docker","text":"<p>O <code>docker-compose.yml</code> gerencia os servi\u00e7os de banco de dados (PostgreSQL), PgAdmin e Mailhog. Para inici\u00e1-los, execute:</p> <p><pre><code>docker-compose up -d\n</code></pre> Isso iniciar\u00e1 os cont\u00eaineres em segundo plano.</p>"},{"location":"desenvolvimento/configuracao_ambiente/#6-executar-as-migracoes-do-banco","title":"6. Executar as Migra\u00e7\u00f5es do Banco","text":"<p>Com o banco de dados rodando no Docker, aplique as migra\u00e7\u00f5es do Django para criar as tabelas do banco de dados:</p> <pre><code>python manage.py migrate\n</code></pre>"},{"location":"desenvolvimento/configuracao_ambiente/#7-criar-um-superusuario","title":"7. Criar um Superusu\u00e1rio","text":"<p>Para acessar a \u00e1rea administrativa do Django, crie um superusu\u00e1rio:</p> <p><pre><code>python manage.py createsuperuser\n</code></pre> Siga as instru\u00e7\u00f5es para definir um e-mail e senha.</p>"},{"location":"desenvolvimento/configuracao_ambiente/#8-iniciar-o-servidor-de-desenvolvimento","title":"8. Iniciar o Servidor de Desenvolvimento","text":"<p>Finalmente, inicie o servidor de desenvolvimento do Django:</p> <pre><code>python manage.py runserver\n</code></pre> <p>A aplica\u00e7\u00e3o estar\u00e1 dispon\u00edvel em <code>http://127.0.0.1:8000</code>.</p>"},{"location":"desenvolvimento/estrutura_projeto/","title":"Estrutura do Projeto","text":"<p>O reposit\u00f3rio do SisCoE \u00e9 organizado para separar claramente as diferentes partes do sistema, como o c\u00f3digo do backend, a documenta\u00e7\u00e3o e as configura\u00e7\u00f5es de deploy.</p>"},{"location":"desenvolvimento/estrutura_projeto/#estrutura-de-diretorios-principal","title":"Estrutura de Diret\u00f3rios Principal","text":"<pre><code>/\n\u251c\u2500\u2500 backend/             # Cont\u00e9m todo o c\u00f3digo-fonte do projeto Django.\n\u251c\u2500\u2500 contrib/             # Scripts e utilit\u00e1rios de apoio ao desenvolvimento.\n\u251c\u2500\u2500 docs/                # Arquivos da documenta\u00e7\u00e3o t\u00e9cnica (gerada com MkDocs).\n\u251c\u2500\u2500 docker/              # Configura\u00e7\u00f5es para os cont\u00eaineres Docker (ex: Nginx).\n\u251c\u2500\u2500 import/              # Scripts e arquivos para importa\u00e7\u00e3o de dados.\n\u251c\u2500\u2500 node_modules/        # Depend\u00eancias do Node.js (gerenciadas pelo npm).\n\u251c\u2500\u2500 venv/                # Ambiente virtual do Python (n\u00e3o versionado).\n\u2502\n\u251c\u2500\u2500 .gitignore           # Arquivos e pastas ignorados pelo Git.\n\u251c\u2500\u2500 docker-compose.yml   # Orquestra\u00e7\u00e3o dos servi\u00e7os Docker.\n\u251c\u2500\u2500 Dockerfile           # Define a imagem Docker para a aplica\u00e7\u00e3o Django.\n\u251c\u2500\u2500 manage.py            # Utilit\u00e1rio de linha de comando do Django.\n\u251c\u2500\u2500 mkdocs.yml           # Arquivo de configura\u00e7\u00e3o do MkDocs.\n\u251c\u2500\u2500 package.json         # Define as depend\u00eancias de frontend (TailwindCSS).\n\u251c\u2500\u2500 requirements.txt     # Depend\u00eancias do backend Python.\n\u2514\u2500\u2500 settings.py          # Arquivo principal de configura\u00e7\u00e3o do Django.\n</code></pre>"},{"location":"desenvolvimento/estrutura_projeto/#detalhamento","title":"Detalhamento","text":""},{"location":"desenvolvimento/estrutura_projeto/#diretorio-backend","title":"Diret\u00f3rio <code>backend/</code>","text":"<p>Este \u00e9 o diret\u00f3rio mais importante, contendo o projeto Django.</p> <ul> <li><code>backend/settings/</code>: Embora exista, o arquivo principal de settings (<code>settings.py</code>) est\u00e1 na raiz. Este diret\u00f3rio pode ser para configura\u00e7\u00f5es mais espec\u00edficas ou um artefato de uma estrutura anterior.</li> <li><code>backend/urls.py</code>: Arquivo de roteamento principal do Django.</li> <li><code>backend/wsgi.py</code> &amp; <code>asgi.py</code>: Pontos de entrada para os servidores WSGI e ASGI.</li> <li><code>backend/&lt;app_name&gt;/</code>: Cada subdiret\u00f3rio aqui \u00e9 um \"app\" Django, representando um m\u00f3dulo do sistema (ex: <code>accounts</code>, <code>efetivo</code>, <code>core</code>).<ul> <li><code>models.py</code>: Define os modelos de dados (tabelas do banco).</li> <li><code>views.py</code>: Cont\u00e9m a l\u00f3gica de neg\u00f3cio que processa as requisi\u00e7\u00f5es.</li> <li><code>urls.py</code>: Define as rotas espec\u00edficas do app.</li> <li><code>forms.py</code>: Define os formul\u00e1rios Django.</li> <li><code>admin.py</code>: Configura a interface de administra\u00e7\u00e3o do Django para os modelos do app.</li> <li><code>templates/</code>: Cont\u00e9m os templates HTML do app.</li> <li><code>migrations/</code>: Armazena os arquivos de migra\u00e7\u00e3o do banco de dados gerados pelo Django.</li> </ul> </li> </ul>"},{"location":"desenvolvimento/estrutura_projeto/#frontend-packagejson-tailwindconfigjs","title":"Frontend (<code>package.json</code>, <code>tailwind.config.js</code>)","text":"<p>O frontend n\u00e3o \u00e9 uma SPA (Single Page Application) separada. Ele \u00e9 constru\u00eddo com templates Django tradicionais. O <code>package.json</code> e o <code>tailwind.config.js</code> s\u00e3o utilizados como ferramentas de desenvolvimento para compilar o TailwindCSS, que \u00e9 o framework CSS utilizado para a estiliza\u00e7\u00e3o da interface.</p>"},{"location":"desenvolvimento/estrutura_projeto/#docker-dockerfile-docker-composeyml-docker","title":"Docker (<code>Dockerfile</code>, <code>docker-compose.yml</code>, <code>docker/</code>)","text":"<ul> <li><code>Dockerfile</code>: Define a receita para construir a imagem Docker da aplica\u00e7\u00e3o Django, instalando as depend\u00eancias e configurando o ambiente.</li> <li><code>docker-compose.yml</code>: Orquestra a execu\u00e7\u00e3o de todos os servi\u00e7os necess\u00e1rios para a aplica\u00e7\u00e3o rodar: a aplica\u00e7\u00e3o Django (<code>app</code>), o banco de dados (<code>db</code>), o <code>pgadmin</code> e o <code>nginx</code> como proxy reverso.</li> <li><code>docker/config/</code>: Cont\u00e9m arquivos de configura\u00e7\u00e3o que s\u00e3o montados nos cont\u00eaineres, como a configura\u00e7\u00e3o do Nginx.</li> </ul>"},{"location":"desenvolvimento/estrutura_projeto/#outros-diretorios","title":"Outros Diret\u00f3rios","text":"<ul> <li><code>contrib/</code>: Cont\u00e9m scripts auxiliares, como <code>env_gen.py</code> para gerar arquivos de ambiente.</li> <li><code>import/</code>: Cont\u00e9m scripts e planilhas para realizar importa\u00e7\u00f5es de dados em massa para o sistema.</li> </ul>"},{"location":"desenvolvimento/frontend/","title":"Desenvolvimento Frontend","text":"<p>O frontend do SisCoE \u00e9 constru\u00eddo com uma abordagem tradicional de renderiza\u00e7\u00e3o no lado do servidor (Server-Side Rendering) utilizando o sistema de templates do Django. N\u00e3o se trata de uma Single Page Application (SPA).</p>"},{"location":"desenvolvimento/frontend/#sistema-de-templates-django","title":"Sistema de Templates Django","text":"<p>A interface do usu\u00e1rio \u00e9 gerada a partir de templates HTML que s\u00e3o processados pelo backend do Django.</p> <ul> <li>Localiza\u00e7\u00e3o: Os templates est\u00e3o localizados dentro do subdiret\u00f3rio <code>templates/</code> de cada app Django (ex: <code>backend/core/templates/core/</code>).</li> <li>Heran\u00e7a: O sistema utiliza a heran\u00e7a de templates do Django. Geralmente, existe um template base (<code>base.html</code>) que define a estrutura principal da p\u00e1gina (cabe\u00e7alho, rodap\u00e9, menu de navega\u00e7\u00e3o), e os templates espec\u00edficos de cada p\u00e1gina estendem este base, preenchendo os blocos de conte\u00fado.</li> <li>Tags e Filtros: S\u00e3o utilizadas as tags e filtros padr\u00e3o do Django (<code>{% for %}</code>, <code>{{ variable }}</code>, etc.), al\u00e9m de tags customizadas que podem ser encontradas nos diret\u00f3rios <code>templatetags/</code> de alguns apps.</li> </ul>"},{"location":"desenvolvimento/frontend/#estilizacao-com-tailwindcss","title":"Estiliza\u00e7\u00e3o com TailwindCSS","text":"<p>A estiliza\u00e7\u00e3o da aplica\u00e7\u00e3o \u00e9 feita utilizando o framework TailwindCSS.</p> <ul> <li>Configura\u00e7\u00e3o: O arquivo <code>tailwind.config.js</code> na raiz do projeto define as configura\u00e7\u00f5es do Tailwind, como tema, cores e plugins.</li> <li>Compila\u00e7\u00e3o: O TailwindCSS funciona como uma ferramenta de desenvolvimento. As classes de utilidade usadas nos templates HTML s\u00e3o escaneadas, e um arquivo CSS final \u00e9 gerado com apenas o CSS necess\u00e1rio. O comando para compilar o CSS geralmente \u00e9 configurado no <code>package.json</code>.</li> <li>Fluxo de Trabalho: Para adicionar ou modificar estilos, o desenvolvedor deve usar as classes de utilidade do Tailwind diretamente no HTML dos templates. Ap\u00f3s a altera\u00e7\u00e3o, o processo de compila\u00e7\u00e3o do CSS precisa ser executado para que as mudan\u00e7as sejam refletidas.</li> </ul>"},{"location":"desenvolvimento/frontend/#javascript-e-interatividade","title":"JavaScript e Interatividade","text":"<p>A interatividade no frontend \u00e9 adicionada atrav\u00e9s de bibliotecas JavaScript. As principais depend\u00eancias de frontend s\u00e3o gerenciadas via <code>npm</code> e est\u00e3o listadas no <code>package.json</code>.</p> <ul> <li> <p><code>package.json</code>: <pre><code>\"dependencies\": {\n  \"@fullcalendar/core\": \"^6.1.15\",\n  \"@fullcalendar/daygrid\": \"^6.1.15\",\n  \"@fullcalendar/google-calendar\": \"^6.1.15\",\n  \"@fullcalendar/list\": \"^6.1.15\",\n  \"@fullcalendar/timegrid\": \"^6.1.15\",\n  \"@tailwindcss/vite\": \"^4.0.9\",\n  \"flowbite\": \"^3.1.2\"\n}\n</code></pre></p> </li> <li> <p>Principais Bibliotecas:</p> <ul> <li>Flowbite: Uma biblioteca de componentes de UI constru\u00edda sobre o TailwindCSS, usada para elementos interativos como modais, dropdowns e tooltips.</li> <li>FullCalendar: Utilizada na aplica\u00e7\u00e3o <code>agenda</code> para criar uma interface de calend\u00e1rio rica e interativa.</li> </ul> </li> <li> <p>Arquivos Est\u00e1ticos: Os arquivos JavaScript e CSS compilados, juntamente com as imagens, est\u00e3o localizados nos diret\u00f3rios <code>static/</code> de cada app. O Django os coleta para um diret\u00f3rio \u00fanico durante o deploy.</p> </li> </ul>"},{"location":"desenvolvimento/testes/","title":"Testes","text":"<p>A estrat\u00e9gia de testes no SisCoE segue as conven\u00e7\u00f5es do framework Django, utilizando o <code>unittest</code> do Python como base. Os testes s\u00e3o fundamentais para garantir a qualidade, a estabilidade e a manutenibilidade do c\u00f3digo.</p>"},{"location":"desenvolvimento/testes/#framework-de-testes","title":"Framework de Testes","text":"<p>O projeto utiliza o framework de testes integrado do Django, que fornece um conjunto de ferramentas e utilit\u00e1rios para simular requisi\u00e7\u00f5es, interagir com o banco de dados de teste e verificar o comportamento da aplica\u00e7\u00e3o.</p>"},{"location":"desenvolvimento/testes/#localizacao-dos-testes","title":"Localiza\u00e7\u00e3o dos Testes","text":"<p>Os testes s\u00e3o organizados por app. Cada app Django (<code>accounts</code>, <code>efetivo</code>, etc.) possui um arquivo <code>tests.py</code>, onde os casos de teste para aquele app espec\u00edfico devem ser escritos.</p> <p>Manter os testes junto ao c\u00f3digo do app facilita a localiza\u00e7\u00e3o e a execu\u00e7\u00e3o de testes relevantes a uma determinada funcionalidade.</p>"},{"location":"desenvolvimento/testes/#como-executar-os-testes","title":"Como Executar os Testes","text":"<p>Para executar o conjunto completo de testes da aplica\u00e7\u00e3o, utilize o seguinte comando do <code>manage.py</code>:</p> <pre><code>python manage.py test\n</code></pre> <p>Este comando descobrir\u00e1 e executar\u00e1 automaticamente todos os testes definidos nos arquivos <code>tests.py</code> de todos os apps do projeto.</p> <p>Para executar os testes de um app espec\u00edfico, voc\u00ea pode especificar o nome do app:</p> <pre><code>python manage.py test backend.efetivo\n</code></pre>"},{"location":"desenvolvimento/testes/#escrevendo-novos-testes","title":"Escrevendo Novos Testes","text":"<p>Ao desenvolver novas funcionalidades ou corrigir bugs, \u00e9 crucial adicionar testes que cubram as altera\u00e7\u00f5es.</p> <ul> <li>Testes de Modelo: Verificam se a l\u00f3gica customizada nos modelos (properties, methods) funciona como esperado.</li> <li>Testes de View: Simulam requisi\u00e7\u00f5es HTTP (GET, POST) para as views e verificam se a resposta est\u00e1 correta (c\u00f3digo de status, conte\u00fado do template, redirecionamentos).</li> <li>Testes de Formul\u00e1rio: Verificam a valida\u00e7\u00e3o e o processamento de formul\u00e1rios.</li> </ul> <p>Exemplo de um teste simples em <code>tests.py</code>:</p> <pre><code>from django.test import TestCase\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\nclass AccountsTestCase(TestCase):\n\n    def setUp(self):\n        # Cria um usu\u00e1rio para ser usado nos testes\n        self.user = User.objects.create_user(\n            email='testuser@example.com',\n            password='testpassword123',\n            first_name='Test',\n            last_name='User'\n        )\n\n    def test_user_creation(self):\n        \"\"\"Verifica se o usu\u00e1rio foi criado corretamente.\"\"\"\n        self.assertEqual(self.user.email, 'testuser@example.com')\n        self.assertTrue(self.user.is_active)\n        self.assertFalse(self.user.is_staff)\n\n    def test_login_view(self):\n        \"\"\"Verifica se a p\u00e1gina de login responde corretamente.\"\"\"\n        response = self.client.get('/accounts/login/')\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'accounts/login.html')\n</code></pre> <p>Manter uma boa cobertura de testes \u00e9 essencial para a sa\u00fade do projeto a longo prazo, permitindo que refatora\u00e7\u00f5es e novas implementa\u00e7\u00f5es sejam feitas com mais seguran\u00e7a.</p>"},{"location":"seguranca/boas_praticas/","title":"Boas Pr\u00e1ticas de Seguran\u00e7a","text":"<p>A seguran\u00e7a \u00e9 um aspecto fundamental no desenvolvimento do SisCoE. O projeto adota v\u00e1rias boas pr\u00e1ticas e aproveita as funcionalidades de seguran\u00e7a integradas do framework Django para proteger a aplica\u00e7\u00e3o e seus dados.</p>"},{"location":"seguranca/boas_praticas/#protecoes-nativas-do-django","title":"Prote\u00e7\u00f5es Nativas do Django","text":"<p>O Django oferece, por padr\u00e3o, prote\u00e7\u00e3o contra v\u00e1rias das vulnerabilidades mais comuns da web:</p> <ul> <li> <p>Preven\u00e7\u00e3o de SQL Injection: O ORM do Django utiliza consultas parametrizadas, o que previne a grande maioria dos ataques de inje\u00e7\u00e3o de SQL. Todo o acesso ao banco de dados atrav\u00e9s do ORM \u00e9, por padr\u00e3o, seguro contra esta vulnerabilidade.</p> </li> <li> <p>Prote\u00e7\u00e3o contra Cross-Site Scripting (XSS): O sistema de templates do Django escapa automaticamente todas as vari\u00e1veis que s\u00e3o renderizadas no HTML. Isso significa que qualquer c\u00f3digo malicioso inserido por um usu\u00e1rio nos dados (ex: um script em um campo de texto) ser\u00e1 renderizado como texto plano e n\u00e3o ser\u00e1 executado no navegador de outros usu\u00e1rios.</p> </li> <li> <p>Prote\u00e7\u00e3o contra Cross-Site Request Forgery (CSRF): Todos os formul\u00e1rios que utilizam o m\u00e9todo <code>POST</code> s\u00e3o protegidos com um token de CSRF (<code>{% csrf_token %}</code>). O Django verifica a validade deste token a cada requisi\u00e7\u00e3o <code>POST</code>, garantindo que a requisi\u00e7\u00e3o tenha se originado de um formul\u00e1rio leg\u00edtimo da pr\u00f3pria aplica\u00e7\u00e3o, e n\u00e3o de um site malicioso.</p> </li> <li> <p>Preven\u00e7\u00e3o de Clickjacking: O <code>django.middleware.clickjacking.XFrameOptionsMiddleware</code> est\u00e1 habilitado, o que impede que o site seja exibido dentro de um <code>&lt;iframe&gt;</code> em outro site, prevenindo ataques de clickjacking.</p> </li> </ul>"},{"location":"seguranca/boas_praticas/#gerenciamento-de-segredos","title":"Gerenciamento de Segredos","text":"<p>Segredos, como a <code>SECRET_KEY</code> do Django e chaves de API, nunca devem ser versionados no c\u00f3digo-fonte.</p> <ul> <li><code>python-decouple</code>: O projeto utiliza a biblioteca <code>python-decouple</code> para carregar essas informa\u00e7\u00f5es sens\u00edveis a partir de vari\u00e1veis de ambiente ou de um arquivo <code>.env</code> (que deve ser inclu\u00eddo no <code>.gitignore</code>).</li> </ul> <p>Exemplo (<code>settings.py</code>): <pre><code>from decouple import config\n\nSECRET_KEY = config('SECRET_KEY')\nDEBUG = config('DEBUG', default=False, cast=bool)\n</code></pre></p>"},{"location":"seguranca/boas_praticas/#configuracoes-de-producao","title":"Configura\u00e7\u00f5es de Produ\u00e7\u00e3o","text":"<p>Para o ambiente de produ\u00e7\u00e3o, as seguintes configura\u00e7\u00f5es de seguran\u00e7a s\u00e3o cruciais:</p> <ul> <li> <p><code>DEBUG = False</code>: Em modo de debug, o Django exibe p\u00e1ginas de erro detalhadas que podem vazar informa\u00e7\u00f5es sens\u00edveis sobre a configura\u00e7\u00e3o do projeto. Em produ\u00e7\u00e3o, o <code>DEBUG</code> deve sempre ser <code>False</code>.</p> </li> <li> <p><code>ALLOWED_HOSTS</code>: Esta configura\u00e7\u00e3o deve ser preenchida com o dom\u00ednio exato da aplica\u00e7\u00e3o para prevenir ataques de envenenamento de cabe\u00e7alho Host.</p> </li> <li> <p>HTTPS: A aplica\u00e7\u00e3o deve ser servida exclusivamente sobre HTTPS para criptografar o tr\u00e1fego entre o cliente e o servidor. O Nginx no <code>docker-compose.yml</code> pode ser configurado para redirecionar todo o tr\u00e1fego HTTP para HTTPS.</p> </li> </ul>"},{"location":"seguranca/boas_praticas/#manutencao-de-dependencias","title":"Manuten\u00e7\u00e3o de Depend\u00eancias","text":"<p>Manter as depend\u00eancias (tanto do Python quanto do Node.js) atualizadas \u00e9 vital para a seguran\u00e7a. Vers\u00f5es desatualizadas podem conter vulnerabilidades conhecidas. \u00c9 recomendado utilizar ferramentas como o <code>Dependabot</code> do GitHub para monitorar e criar Pull Requests para atualizar as depend\u00eancias automaticamente.</p>"},{"location":"seguranca/controle_acesso/","title":"Controle de Acesso","text":"<p>O controle de acesso no SisCoE \u00e9 implementado atrav\u00e9s de um sistema de permiss\u00f5es hier\u00e1rquicas, constru\u00eddo sobre o sistema de autentica\u00e7\u00e3o do Django. Isso garante que os usu\u00e1rios s\u00f3 possam acessar as funcionalidades e os dados para os quais eles t\u00eam autoriza\u00e7\u00e3o.</p>"},{"location":"seguranca/controle_acesso/#modelo-de-usuario-customizado","title":"Modelo de Usu\u00e1rio Customizado","text":"<p>O projeto utiliza um modelo de usu\u00e1rio customizado (<code>accounts.User</code>), que estende o <code>AbstractBaseUser</code> do Django. Este modelo inclui um campo <code>permissoes</code> que define o n\u00edvel de acesso do usu\u00e1rio no sistema.</p> <p>Modelo <code>User</code> (<code>accounts/models.py</code>): <pre><code>class User(AbstractBaseUser, PermissionsMixin):\n    # ... outros campos ...\n\n    PERMISSOES_CHOICES = (\n        (\"basico\", \"B\u00e1sico\"),\n        (\"visitantes\", \"Visitante\"),\n        (\"sgb\", \"SGB\"),\n        (\"gestor\", \"Gestor\"),\n        (\"admin\", \"Admin\"),\n    )\n    permissoes = models.CharField(\n        _('Permission Level'),\n        max_length=20,\n        choices=PERMISSOES_CHOICES,\n        default=\"basico\"\n    )\n\n    # ...\n</code></pre></p>"},{"location":"seguranca/controle_acesso/#niveis-de-permissao","title":"N\u00edveis de Permiss\u00e3o","text":"<p>Os n\u00edveis de permiss\u00e3o s\u00e3o hier\u00e1rquicos, o que significa que um n\u00edvel mais alto herda todas as permiss\u00f5es dos n\u00edveis inferiores.</p> <ol> <li>B\u00e1sico: O n\u00edvel mais baixo, com acesso apenas a funcionalidades essenciais e aos seus pr\u00f3prios dados.</li> <li>Visitante: Um n\u00edvel intermedi\u00e1rio com permiss\u00f5es de visualiza\u00e7\u00e3o adicionais.</li> <li>SGB: Permite a gest\u00e3o de dados relacionados a um SGB (Subgrupamento de Bombeiros) espec\u00edfico.</li> <li>Gestor: Acesso de gerenciamento amplo sobre os dados da aplica\u00e7\u00e3o, mas sem permiss\u00f5es de superusu\u00e1rio.</li> <li>Admin: Acesso de administrador ao painel do Django e a funcionalidades de gerenciamento do sistema.</li> <li>Superuser: Acesso irrestrito a todo o sistema, concedido pela flag <code>is_superuser</code>.</li> </ol>"},{"location":"seguranca/controle_acesso/#verificacao-de-permissoes","title":"Verifica\u00e7\u00e3o de Permiss\u00f5es","text":"<p>A verifica\u00e7\u00e3o do n\u00edvel de permiss\u00e3o de um usu\u00e1rio \u00e9 centralizada no m\u00e9todo <code>has_permission_level()</code> do modelo <code>User</code>.</p> <pre><code>def has_permission_level(self, required_level):\n    hierarchy = {\n        'basico': 0,\n        'visitantes': 1,\n        'sgb': 2,\n        'gestor': 3,\n        'admin': 4\n    }\n\n    if self.is_superuser:\n        return True\n\n    user_level = hierarchy.get(self.permissoes)\n    req_level = hierarchy.get(required_level)\n\n    if None in (user_level, req_level):\n        return False\n\n    return user_level &gt;= req_level\n</code></pre> <p>Este m\u00e9todo \u00e9 ent\u00e3o utilizado em views e middlewares para restringir o acesso.</p>"},{"location":"seguranca/controle_acesso/#protegendo-as-views","title":"Protegendo as Views","text":"<p>O acesso \u00e0s views \u00e9 protegido utilizando uma combina\u00e7\u00e3o de decorators do Django e decorators customizados.</p> <ul> <li> <p><code>@login_required</code>: O decorator padr\u00e3o do Django que garante que apenas usu\u00e1rios autenticados possam acessar uma determinada view.</p> </li> <li> <p>Decorators Customizados: O projeto possui decorators customizados (em <code>accounts/decorators.py</code>) que verificam o n\u00edvel de permiss\u00e3o.</p> </li> </ul> <p>Exemplo de uso em uma view: <pre><code>from django.contrib.auth.decorators import login_required\nfrom .decorators import permission_required\n\n@login_required\n@permission_required('gestor')\ndef minha_view_restrita(request):\n    # Apenas usu\u00e1rios logados com n\u00edvel 'gestor' ou superior\n    # podem acessar esta view.\n    ...\n</code></pre></p> <p>Este sistema de controle de acesso baseado em pap\u00e9is (RBAC - Role-Based Access Control) \u00e9 flex\u00edvel e permite uma gest\u00e3o granular das permiss\u00f5es em toda a aplica\u00e7\u00e3o.</p>"},{"location":"seguranca/criptografia/","title":"Criptografia","text":"<p>A criptografia \u00e9 uma camada de defesa essencial para proteger a confidencialidade e a integridade dos dados no SisCoE. A estrat\u00e9gia de criptografia abrange os dados em tr\u00e2nsito e em repouso.</p>"},{"location":"seguranca/criptografia/#criptografia-em-transito","title":"Criptografia em Tr\u00e2nsito","text":"<p>Toda a comunica\u00e7\u00e3o entre o navegador do usu\u00e1rio e o servidor da aplica\u00e7\u00e3o deve ser protegida com HTTPS (HTTP sobre TLS).</p> <ul> <li>Implementa\u00e7\u00e3o: Em um ambiente de produ\u00e7\u00e3o, a termina\u00e7\u00e3o TLS/SSL \u00e9 geralmente responsabilidade do proxy reverso (Nginx). O Nginx \u00e9 configurado com um certificado SSL/TLS (obtido de uma Autoridade Certificadora como Let's Encrypt) para criptografar todo o tr\u00e1fego que chega na porta 443 (HTTPS).</li> <li>Fluxo: O tr\u00e1fego entre o usu\u00e1rio e o Nginx \u00e9 criptografado. A comunica\u00e7\u00e3o interna entre o Nginx e a aplica\u00e7\u00e3o Django (Gunicorn) ocorre dentro da rede privada do Docker e pode ou n\u00e3o ser criptografada, pois acontece em um ambiente controlado.</li> </ul> <p>A configura\u00e7\u00e3o para for\u00e7ar o redirecionamento de todo o tr\u00e1fego HTTP para HTTPS no Nginx \u00e9 uma pr\u00e1tica de seguran\u00e7a padr\u00e3o e recomendada.</p>"},{"location":"seguranca/criptografia/#criptografia-de-senhas","title":"Criptografia de Senhas","text":"<p>As senhas dos usu\u00e1rios nunca s\u00e3o armazenadas em texto plano. O Django gerencia a seguran\u00e7a das senhas de forma robusta.</p> <ul> <li>Hashing de Senhas: Em vez de armazenar a senha, o Django armazena um \"hash\" da senha. Um hash \u00e9 o resultado de uma fun\u00e7\u00e3o criptogr\u00e1fica de m\u00e3o \u00fanica que \u00e9 computacionalmente dif\u00edcil de reverter.</li> <li>Algoritmo Utilizado: O projeto est\u00e1 configurado para usar o Argon2, atrav\u00e9s da biblioteca <code>argon2-cffi</code>. O Argon2 \u00e9 atualmente um dos algoritmos de hashing mais recomendados para senhas, pois \u00e9 resistente a ataques de for\u00e7a bruta tanto em CPUs quanto em GPUs.</li> </ul> <p>Quando um usu\u00e1rio faz login, a senha fornecida \u00e9 passada pela mesma fun\u00e7\u00e3o de hashing, e o resultado \u00e9 comparado com o hash armazenado no banco de dados. Se os hashes corresponderem, a senha est\u00e1 correta.</p>"},{"location":"seguranca/criptografia/#criptografia-de-dados-em-repouso-at-rest","title":"Criptografia de Dados em Repouso (At Rest)","text":"<p>Refere-se \u00e0 criptografia dos dados enquanto est\u00e3o armazenados no disco do servidor.</p> <ul> <li> <p>N\u00edvel de Aplica\u00e7\u00e3o: Atualmente, o projeto n\u00e3o parece implementar criptografia em n\u00edvel de aplica\u00e7\u00e3o para campos espec\u00edficos do banco de dados (ex: criptografar o CPF de um militar antes de salv\u00e1-lo). Se dados extremamente sens\u00edveis forem armazenados no futuro, o uso da biblioteca <code>django-cryptography</code> pode ser considerado para criptografar campos individuais.</p> </li> <li> <p>N\u00edvel de Banco de Dados/Sistema de Arquivos: A criptografia dos dados em repouso \u00e9 mais comumente tratada na camada de infraestrutura.</p> <ul> <li>PostgreSQL: O PostgreSQL oferece mecanismos para criptografar dados em colunas espec\u00edficas ou o banco de dados inteiro.</li> <li>Criptografia de Disco: O provedor de nuvem ou o sistema operacional do servidor host pode ser configurado para criptografar todo o disco onde os dados do banco de dados e os arquivos de m\u00eddia est\u00e3o armazenados. Esta \u00e9 uma pr\u00e1tica de seguran\u00e7a recomendada para proteger os dados em caso de acesso f\u00edsico n\u00e3o autorizado ao servidor.</li> </ul> </li> </ul>"},{"location":"versao_e_commits/changelog/","title":"Changelog","text":"<p>O <code>CHANGELOG.md</code> \u00e9 um arquivo que registra todas as altera\u00e7\u00f5es not\u00e1veis feitas na aplica\u00e7\u00e3o em cada nova vers\u00e3o. Ele serve como um resumo leg\u00edvel por humanos do que mudou, incluindo novas funcionalidades, corre\u00e7\u00f5es de bugs e breaking changes.</p>"},{"location":"versao_e_commits/changelog/#geracao-automatizada","title":"Gera\u00e7\u00e3o Automatizada","text":"<p>Manter um changelog manualmente \u00e9 um processo tedioso e propenso a erros. Ao adotar o Padr\u00e3o de Commits, o changelog pode ser gerado e atualizado de forma autom\u00e1tica.</p> <p>Ferramentas como o <code>standard-version</code> (para projetos Node.js, mas pode ser adaptado) ou o <code>conventional-changelog-cli</code> podem ler o hist\u00f3rico de commits do Git desde a \u00faltima tag de vers\u00e3o e gerar uma nova se\u00e7\u00e3o no <code>CHANGELOG.md</code> com todas as mudan\u00e7as relevantes.</p>"},{"location":"versao_e_commits/changelog/#processo-de-release","title":"Processo de Release","text":"<p>Um processo de release utilizando a gera\u00e7\u00e3o autom\u00e1tica de changelog seguiria estes passos:</p> <ol> <li>Finalizar o Desenvolvimento: Garantir que todo o c\u00f3digo para a nova vers\u00e3o esteja na branch principal (<code>main</code> ou <code>develop</code>).</li> <li>Executar o Comando de Release: Rodar o comando da ferramenta escolhida. Por exemplo:     <pre><code># Exemplo usando standard-version\nnpm run release\n</code></pre></li> <li>O que o comando faz:<ul> <li>Analisa os commits desde a \u00faltima tag.</li> <li>Determina a nova vers\u00e3o do projeto (major, minor ou patch) com base nos tipos de commit (<code>feat</code> para minor, <code>fix</code> para patch, <code>BREAKING CHANGE</code> para major).</li> <li>Gera (ou atualiza) o <code>CHANGELOG.md</code> com as novas altera\u00e7\u00f5es.</li> <li>Cria um novo commit incluindo o <code>CHANGELOG.md</code> atualizado e a nova vers\u00e3o no <code>package.json</code> (ou outro arquivo de vers\u00e3o).</li> <li>Cria uma nova tag Git com o n\u00famero da vers\u00e3o (ex: <code>v1.2.0</code>).</li> </ul> </li> <li>Publicar a Release: Fazer o push dos commits e da nova tag para o reposit\u00f3rio remoto.     <pre><code>git push --follow-tags origin main\n</code></pre></li> </ol>"},{"location":"versao_e_commits/changelog/#exemplo-de-estrutura-do-changelogmd","title":"Exemplo de Estrutura do <code>CHANGELOG.md</code>","text":"<p>Um <code>CHANGELOG.md</code> gerado automaticamente teria a seguinte apar\u00eancia:</p> <pre><code># Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [1.1.0](https://github.com/Andre-fdias/SisCoE/compare/v1.0.0...v1.1.0) (2025-10-17)\n\n### Features\n\n*   **agenda:** permitir que usu\u00e1rios anexem arquivos a tarefas (a1b2c3d)\n*   **efetivo:** adicionar campo de tipo sangu\u00edneo ao cadastro (e4f5g6h)\n\n### Bug Fixes\n\n*   **accounts:** corrigir redirecionamento ap\u00f3s login (c7d8e9f)\n\n---\n\n## [1.0.0](https://github.com/Andre-fdias/SisCoE/releases/tag/v1.0.0) (2025-09-20)\n\n### Features\n\n*   Lan\u00e7amento inicial do sistema SisCoE.\n</code></pre> <p>A ado\u00e7\u00e3o deste processo garante que o changelog esteja sempre atualizado e reflita com precis\u00e3o o hist\u00f3rico de desenvolvimento do projeto.</p>"},{"location":"versao_e_commits/padrao_commits/","title":"Padr\u00e3o de Commits","text":"<p>Para manter um hist\u00f3rico de commits limpo, leg\u00edvel e significativo, o projeto SisCoE adota a especifica\u00e7\u00e3o Conventional Commits. Este padr\u00e3o ajuda a comunicar a natureza das mudan\u00e7as para outros desenvolvedores e permite a automa\u00e7\u00e3o de processos, como a gera\u00e7\u00e3o de changelogs.</p>"},{"location":"versao_e_commits/padrao_commits/#estrutura-de-um-commit","title":"Estrutura de um Commit","text":"<p>Cada mensagem de commit deve seguir a seguinte estrutura:</p> <pre><code>&lt;tipo&gt;[escopo opcional]: &lt;descri\u00e7\u00e3o&gt;\n\n[corpo opcional]\n\n[rodap\u00e9 opcional]\n</code></pre>"},{"location":"versao_e_commits/padrao_commits/#tipo","title":"Tipo","text":"<p>O tipo deve ser um dos seguintes:</p> <ul> <li><code>feat</code>: Uma nova funcionalidade (feature) para o usu\u00e1rio.</li> <li><code>fix</code>: Uma corre\u00e7\u00e3o de bug.</li> <li><code>docs</code>: Altera\u00e7\u00f5es apenas na documenta\u00e7\u00e3o.</li> <li><code>style</code>: Altera\u00e7\u00f5es que n\u00e3o afetam o significado do c\u00f3digo (espa\u00e7os em branco, formata\u00e7\u00e3o, ponto e v\u00edrgula, etc).</li> <li><code>refactor</code>: Uma altera\u00e7\u00e3o de c\u00f3digo que n\u00e3o corrige um bug nem adiciona uma funcionalidade.</li> <li><code>perf</code>: Uma altera\u00e7\u00e3o de c\u00f3digo que melhora a performance.</li> <li><code>test</code>: Adicionando testes que faltavam ou corrigindo testes existentes.</li> <li><code>chore</code>: Altera\u00e7\u00f5es no processo de build, em arquivos de configura\u00e7\u00e3o ou em ferramentas auxiliares. N\u00e3o altera o c\u00f3digo-fonte da aplica\u00e7\u00e3o.</li> <li><code>revert</code>: Reverte um commit anterior.</li> </ul>"},{"location":"versao_e_commits/padrao_commits/#escopo-opcional","title":"Escopo (Opcional)","text":"<p>O escopo fornece um contexto adicional para o commit. Geralmente, \u00e9 o nome do m\u00f3dulo ou da parte da aplica\u00e7\u00e3o que foi afetada.</p> <ul> <li><code>feat(efetivo): adicionar campo de tipo sangu\u00edneo ao cadastro</code></li> <li><code>fix(accounts): corrigir redirecionamento ap\u00f3s login</code></li> <li><code>docs(docker): atualizar instru\u00e7\u00f5es de setup</code></li> </ul>"},{"location":"versao_e_commits/padrao_commits/#descricao","title":"Descri\u00e7\u00e3o","text":"<p>A descri\u00e7\u00e3o \u00e9 um resumo conciso das altera\u00e7\u00f5es, escrito no imperativo presente.</p> <ul> <li>Use \"adicionar\" em vez de \"adicionado\" ou \"adicionando\".</li> <li>Comece com letra min\u00fascula.</li> <li>N\u00e3o termine com ponto final.</li> </ul>"},{"location":"versao_e_commits/padrao_commits/#corpo-opcional","title":"Corpo (Opcional)","text":"<p>O corpo do commit \u00e9 usado para fornecer mais detalhes sobre a altera\u00e7\u00e3o, como o contexto da mudan\u00e7a e a motiva\u00e7\u00e3o para ela.</p>"},{"location":"versao_e_commits/padrao_commits/#rodape-opcional","title":"Rodap\u00e9 (Opcional)","text":"<p>O rodap\u00e9 \u00e9 usado para referenciar issues ou Pull Requests. Em particular, para indicar Breaking Changes (mudan\u00e7as que quebram a compatibilidade).</p> <ul> <li><code>BREAKING CHANGE: o campo 'permissoes' no modelo User agora \u00e9 obrigat\u00f3rio.</code></li> </ul>"},{"location":"versao_e_commits/padrao_commits/#exemplos","title":"Exemplos","text":"<p>Commit de uma nova funcionalidade: <pre><code>feat(agenda): permitir que usu\u00e1rios anexem arquivos a tarefas\n\nAdiciona um modelo `AnexoTarefa` e atualiza a view e o template\npara permitir o upload de arquivos associados a uma tarefa.\n</code></pre></p> <p>Commit de uma corre\u00e7\u00e3o de bug: <pre><code>fix(efetivo): corrigir c\u00e1lculo de idade para anos bissextos\n\nO c\u00e1lculo anterior n\u00e3o levava em conta corretamente os anos\nbissextos, resultando em uma idade incorreta por um dia.\n\nRefs: #123\n</code></pre></p> <p>Commit com uma Breaking Change: <pre><code>refactor(accounts): renomear modelo Profile para UserProfile\n\nBREAKING CHANGE: O modelo `accounts.Profile` foi renomeado para\n`accounts.UserProfile`. Todas as importa\u00e7\u00f5es e refer\u00eancias\nprecisam ser atualizadas.\n</code></pre></p> <p>Adotar este padr\u00e3o tornar\u00e1 o hist\u00f3rico do Git muito mais valioso e f\u00e1cil de navegar.</p>"},{"location":"versao_e_commits/versionamento/","title":"Versionamento Sem\u00e2ntico (SemVer)","text":"<p>O projeto SisCoE adota o Versionamento Sem\u00e2ntico (SemVer) para gerenciar os n\u00fameros de vers\u00e3o da aplica\u00e7\u00e3o. O SemVer \u00e9 um conjunto de regras simples que ditam como os n\u00fameros de vers\u00e3o s\u00e3o atribu\u00eddos e incrementados.</p> <p>A utiliza\u00e7\u00e3o do SemVer, em conjunto com o Padr\u00e3o de Commits, torna as novas vers\u00f5es do software previs\u00edveis e comunica claramente o escopo das altera\u00e7\u00f5es.</p>"},{"location":"versao_e_commits/versionamento/#formato-da-versao","title":"Formato da Vers\u00e3o","text":"<p>Uma vers\u00e3o SemVer tem o formato <code>MAJOR.MINOR.PATCH</code>.</p> <ul> <li><code>MAJOR</code> (Principal): Incrementada quando s\u00e3o feitas altera\u00e7\u00f5es incompat\u00edveis na API (breaking changes).</li> <li><code>MINOR</code> (Menor): Incrementada quando s\u00e3o adicionadas novas funcionalidades de forma retrocompat\u00edvel.</li> <li><code>PATCH</code> (Corre\u00e7\u00e3o): Incrementada quando s\u00e3o feitas corre\u00e7\u00f5es de bugs de forma retrocompat\u00edvel.</li> </ul>"},{"location":"versao_e_commits/versionamento/#relacao-com-o-padrao-de-commits","title":"Rela\u00e7\u00e3o com o Padr\u00e3o de Commits","text":"<p>A beleza de usar o SemVer com o Conventional Commits \u00e9 que a decis\u00e3o de qual parte da vers\u00e3o incrementar pode ser automatizada:</p> <ul> <li>Um commit do tipo <code>feat</code> resulta em um incremento de vers\u00e3o MINOR (<code>1.2.0</code> -&gt; <code>1.3.0</code>).</li> <li>Um commit do tipo <code>fix</code> resulta em um incremento de vers\u00e3o PATCH (<code>1.2.0</code> -&gt; <code>1.2.1</code>).</li> <li>Um commit que inclui <code>BREAKING CHANGE:</code> no rodap\u00e9 resulta em um incremento de vers\u00e3o MAJOR (<code>1.2.0</code> -&gt; <code>2.0.0</code>).</li> </ul> <p>Outros tipos de commit (<code>docs</code>, <code>style</code>, <code>refactor</code>, <code>test</code>, <code>chore</code>) n\u00e3o disparam um incremento de vers\u00e3o por si s\u00f3.</p>"},{"location":"versao_e_commits/versionamento/#exemplo-de-fluxo","title":"Exemplo de Fluxo","text":"<ol> <li>Vers\u00e3o Atual: <code>1.5.2</code></li> <li>Um desenvolvedor faz um commit para corrigir um bug:     <pre><code>fix(accounts): impedir login com usu\u00e1rios inativos\n</code></pre></li> <li>Outro desenvolvedor adiciona uma nova funcionalidade:     <pre><code>feat(relatorios): adicionar exporta\u00e7\u00e3o de efetivo para PDF\n</code></pre></li> <li>Ao executar o processo de release automatizado (descrito na se\u00e7\u00e3o Changelog), a ferramenta de <code>conventional-changelog</code> analisar\u00e1 esses commits.</li> <li>Como h\u00e1 um <code>feat</code>, a nova vers\u00e3o ser\u00e1 <code>1.6.0</code> (um incremento <code>MINOR</code>). Se houvesse apenas o <code>fix</code>, a nova vers\u00e3o seria <code>1.5.3</code> (um incremento <code>PATCH</code>).</li> </ol>"},{"location":"versao_e_commits/versionamento/#versao-inicial-0yz","title":"Vers\u00e3o Inicial (0.y.z)","text":"<p>Enquanto o projeto est\u00e1 em desenvolvimento inicial (vers\u00e3o <code>0.y.z</code>), qualquer altera\u00e7\u00e3o pode resultar em uma breaking change. A vers\u00e3o <code>1.0.0</code> marca o primeiro lan\u00e7amento est\u00e1vel e p\u00fablico da aplica\u00e7\u00e3o.</p> <p>A ado\u00e7\u00e3o do Versionamento Sem\u00e2ntico \u00e9 crucial para uma boa comunica\u00e7\u00e3o entre a equipe de desenvolvimento e para a gest\u00e3o de depend\u00eancias e releases.</p>"}]}